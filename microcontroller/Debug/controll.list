
controll.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005370  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08005500  08005500  00006500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005558  08005558  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005558  08005558  00006558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005560  08005560  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005560  08005560  00006560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005564  08005564  00006564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005568  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          00004200  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004260  20004260  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013431  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cb9  00000000  00000000  0001a4c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d8  00000000  00000000  0001d180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000de8  00000000  00000000  0001e358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002276e  00000000  00000000  0001f140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000141ea  00000000  00000000  000418ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d376d  00000000  00000000  00055a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00129205  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004da4  00000000  00000000  00129248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  0012dfec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054e8 	.word	0x080054e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080054e8 	.word	0x080054e8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	4a07      	ldr	r2, [pc, #28]	@ (80004ec <vApplicationGetIdleTaskMemory+0x2c>)
 80004d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	4a06      	ldr	r2, [pc, #24]	@ (80004f0 <vApplicationGetIdleTaskMemory+0x30>)
 80004d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	2000007c 	.word	0x2000007c
 80004f0:	2000011c 	.word	0x2000011c

080004f4 <vChilPeri>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vChilPeri(void *pvParam)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80004fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000500:	4808      	ldr	r0, [pc, #32]	@ (8000524 <vChilPeri+0x30>)
 8000502:	f000 feae 	bl	8001262 <HAL_GPIO_TogglePin>
		vTaskDelay(10000 / portTICK_RATE_MS);
 8000506:	f242 7010 	movw	r0, #10000	@ 0x2710
 800050a:	f003 ff65 	bl	80043d8 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800050e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000512:	4804      	ldr	r0, [pc, #16]	@ (8000524 <vChilPeri+0x30>)
 8000514:	f000 fea5 	bl	8001262 <HAL_GPIO_TogglePin>
		vTaskDelay(15000 / portTICK_RATE_MS);
 8000518:	f643 2098 	movw	r0, #15000	@ 0x3a98
 800051c:	f003 ff5c 	bl	80043d8 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000520:	bf00      	nop
 8000522:	e7eb      	b.n	80004fc <vChilPeri+0x8>
 8000524:	40020c00 	.word	0x40020c00

08000528 <vConv>:
	}
	vTaskDelete(NULL);
}
void vConv(void *pvParam)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if (var==1)
 8000530:	4b0b      	ldr	r3, [pc, #44]	@ (8000560 <vConv+0x38>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d1fb      	bne.n	8000530 <vConv+0x8>
		{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000538:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800053c:	4809      	ldr	r0, [pc, #36]	@ (8000564 <vConv+0x3c>)
 800053e:	f000 fe90 	bl	8001262 <HAL_GPIO_TogglePin>
		vTaskDelay(15000 / portTICK_RATE_MS);
 8000542:	f643 2098 	movw	r0, #15000	@ 0x3a98
 8000546:	f003 ff47 	bl	80043d8 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800054a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800054e:	4805      	ldr	r0, [pc, #20]	@ (8000564 <vConv+0x3c>)
 8000550:	f000 fe87 	bl	8001262 <HAL_GPIO_TogglePin>
		vTaskDelay(20000 / portTICK_RATE_MS);
 8000554:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8000558:	f003 ff3e 	bl	80043d8 <vTaskDelay>
		if (var==1)
 800055c:	e7e8      	b.n	8000530 <vConv+0x8>
 800055e:	bf00      	nop
 8000560:	200003c4 	.word	0x200003c4
 8000564:	40020c00 	.word	0x40020c00

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b5b0      	push	{r4, r5, r7, lr}
 800056a:	b08a      	sub	sp, #40	@ 0x28
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fb6f 	bl	8000c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f849 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8df 	bl	8000738 <MX_GPIO_Init>
  MX_I2C1_Init();
 800057a:	f000 f8af 	bl	80006dc <MX_I2C1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800057e:	4b1a      	ldr	r3, [pc, #104]	@ (80005e8 <main+0x80>)
 8000580:	463c      	mov	r4, r7
 8000582:	461d      	mov	r5, r3
 8000584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000588:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000590:	463b      	mov	r3, r7
 8000592:	2100      	movs	r1, #0
 8000594:	4618      	mov	r0, r3
 8000596:	f003 fc5c 	bl	8003e52 <osThreadCreate>
 800059a:	4603      	mov	r3, r0
 800059c:	4a13      	ldr	r2, [pc, #76]	@ (80005ec <main+0x84>)
 800059e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xRet = xTaskCreate(vChilPeri, "Task1", configMINIMAL_STACK_SIZE , NULL , 4, &xChiller);
 80005a0:	4b13      	ldr	r3, [pc, #76]	@ (80005f0 <main+0x88>)
 80005a2:	9301      	str	r3, [sp, #4]
 80005a4:	2304      	movs	r3, #4
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	2300      	movs	r3, #0
 80005aa:	2280      	movs	r2, #128	@ 0x80
 80005ac:	4911      	ldr	r1, [pc, #68]	@ (80005f4 <main+0x8c>)
 80005ae:	4812      	ldr	r0, [pc, #72]	@ (80005f8 <main+0x90>)
 80005b0:	f003 fdc3 	bl	800413a <xTaskCreate>
 80005b4:	61f8      	str	r0, [r7, #28]
  if(xRet != pdTRUE)
 80005b6:	69fb      	ldr	r3, [r7, #28]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d001      	beq.n	80005c0 <main+0x58>
	  Error_Handler();
 80005bc:	f000 f98a 	bl	80008d4 <Error_Handler>
  xRet = xTaskCreate(vConv, "Task2", configMINIMAL_STACK_SIZE , NULL , 4, &xConveyor);
 80005c0:	4b0e      	ldr	r3, [pc, #56]	@ (80005fc <main+0x94>)
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	2304      	movs	r3, #4
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2300      	movs	r3, #0
 80005ca:	2280      	movs	r2, #128	@ 0x80
 80005cc:	490c      	ldr	r1, [pc, #48]	@ (8000600 <main+0x98>)
 80005ce:	480d      	ldr	r0, [pc, #52]	@ (8000604 <main+0x9c>)
 80005d0:	f003 fdb3 	bl	800413a <xTaskCreate>
 80005d4:	61f8      	str	r0, [r7, #28]
    if(xRet != pdTRUE)
 80005d6:	69fb      	ldr	r3, [r7, #28]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d001      	beq.n	80005e0 <main+0x78>
  	  Error_Handler();
 80005dc:	f000 f97a 	bl	80008d4 <Error_Handler>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005e0:	f003 fc30 	bl	8003e44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <main+0x7c>
 80005e8:	0800551c 	.word	0x0800551c
 80005ec:	20000370 	.word	0x20000370
 80005f0:	20000374 	.word	0x20000374
 80005f4:	08005500 	.word	0x08005500
 80005f8:	080004f5 	.word	0x080004f5
 80005fc:	20000378 	.word	0x20000378
 8000600:	08005508 	.word	0x08005508
 8000604:	08000529 	.word	0x08000529

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	@ 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	@ 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f004 fe8c 	bl	8005334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b28      	ldr	r3, [pc, #160]	@ (80006d4 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000634:	4a27      	ldr	r2, [pc, #156]	@ (80006d4 <SystemClock_Config+0xcc>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	@ 0x40
 800063c:	4b25      	ldr	r3, [pc, #148]	@ (80006d4 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b22      	ldr	r3, [pc, #136]	@ (80006d8 <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a21      	ldr	r2, [pc, #132]	@ (80006d8 <SystemClock_Config+0xd0>)
 8000652:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1f      	ldr	r3, [pc, #124]	@ (80006d8 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000664:	2302      	movs	r3, #2
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066c:	2310      	movs	r3, #16
 800066e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000670:	2302      	movs	r3, #2
 8000672:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000674:	2300      	movs	r3, #0
 8000676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000678:	2308      	movs	r3, #8
 800067a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800067c:	2332      	movs	r3, #50	@ 0x32
 800067e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000684:	2307      	movs	r3, #7
 8000686:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f002 fc55 	bl	8002f3c <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000698:	f000 f91c 	bl	80008d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2101      	movs	r1, #1
 80006ba:	4618      	mov	r0, r3
 80006bc:	f002 feb6 	bl	800342c <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006c6:	f000 f905 	bl	80008d4 <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	@ 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e0:	4b12      	ldr	r3, [pc, #72]	@ (800072c <MX_I2C1_Init+0x50>)
 80006e2:	4a13      	ldr	r2, [pc, #76]	@ (8000730 <MX_I2C1_Init+0x54>)
 80006e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_I2C1_Init+0x50>)
 80006e8:	4a12      	ldr	r2, [pc, #72]	@ (8000734 <MX_I2C1_Init+0x58>)
 80006ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <MX_I2C1_Init+0x50>)
 80006fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000700:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <MX_I2C1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000706:	4b09      	ldr	r3, [pc, #36]	@ (800072c <MX_I2C1_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070c:	4b07      	ldr	r3, [pc, #28]	@ (800072c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000712:	4b06      	ldr	r3, [pc, #24]	@ (800072c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	@ (800072c <MX_I2C1_Init+0x50>)
 800071a:	f000 fde1 	bl	80012e0 <HAL_I2C_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000724:	f000 f8d6 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	2000031c 	.word	0x2000031c
 8000730:	40005400 	.word	0x40005400
 8000734:	000186a0 	.word	0x000186a0

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	@ 0x28
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	4b4f      	ldr	r3, [pc, #316]	@ (8000890 <MX_GPIO_Init+0x158>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a4e      	ldr	r2, [pc, #312]	@ (8000890 <MX_GPIO_Init+0x158>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
 800075e:	4b4c      	ldr	r3, [pc, #304]	@ (8000890 <MX_GPIO_Init+0x158>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	4b48      	ldr	r3, [pc, #288]	@ (8000890 <MX_GPIO_Init+0x158>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a47      	ldr	r2, [pc, #284]	@ (8000890 <MX_GPIO_Init+0x158>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b45      	ldr	r3, [pc, #276]	@ (8000890 <MX_GPIO_Init+0x158>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	4b41      	ldr	r3, [pc, #260]	@ (8000890 <MX_GPIO_Init+0x158>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a40      	ldr	r2, [pc, #256]	@ (8000890 <MX_GPIO_Init+0x158>)
 8000790:	f043 0308 	orr.w	r3, r3, #8
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b3e      	ldr	r3, [pc, #248]	@ (8000890 <MX_GPIO_Init+0x158>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0308 	and.w	r3, r3, #8
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b3a      	ldr	r3, [pc, #232]	@ (8000890 <MX_GPIO_Init+0x158>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a39      	ldr	r2, [pc, #228]	@ (8000890 <MX_GPIO_Init+0x158>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b37      	ldr	r3, [pc, #220]	@ (8000890 <MX_GPIO_Init+0x158>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 80007be:	2201      	movs	r2, #1
 80007c0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80007c4:	4833      	ldr	r0, [pc, #204]	@ (8000894 <MX_GPIO_Init+0x15c>)
 80007c6:	f000 fd33 	bl	8001230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007ca:	2308      	movs	r3, #8
 80007cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	482e      	ldr	r0, [pc, #184]	@ (8000898 <MX_GPIO_Init+0x160>)
 80007e0:	f000 fb8a 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007e4:	2301      	movs	r3, #1
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	4828      	ldr	r0, [pc, #160]	@ (800089c <MX_GPIO_Init+0x164>)
 80007fa:	f000 fb7d 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007fe:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	481f      	ldr	r0, [pc, #124]	@ (8000894 <MX_GPIO_Init+0x15c>)
 8000818:	f000 fb6e 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 PD2 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 800081c:	2316      	movs	r3, #22
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000820:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	4818      	ldr	r0, [pc, #96]	@ (8000894 <MX_GPIO_Init+0x15c>)
 8000832:	f000 fb61 	bl	8000ef8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2105      	movs	r1, #5
 800083a:	2006      	movs	r0, #6
 800083c:	f000 fb02 	bl	8000e44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000840:	2006      	movs	r0, #6
 8000842:	f000 fb1b 	bl	8000e7c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2105      	movs	r1, #5
 800084a:	2007      	movs	r0, #7
 800084c:	f000 fafa 	bl	8000e44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000850:	2007      	movs	r0, #7
 8000852:	f000 fb13 	bl	8000e7c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2105      	movs	r1, #5
 800085a:	2008      	movs	r0, #8
 800085c:	f000 faf2 	bl	8000e44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000860:	2008      	movs	r0, #8
 8000862:	f000 fb0b 	bl	8000e7c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2105      	movs	r1, #5
 800086a:	2009      	movs	r0, #9
 800086c:	f000 faea 	bl	8000e44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000870:	2009      	movs	r0, #9
 8000872:	f000 fb03 	bl	8000e7c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2105      	movs	r1, #5
 800087a:	200a      	movs	r0, #10
 800087c:	f000 fae2 	bl	8000e44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000880:	200a      	movs	r0, #10
 8000882:	f000 fafb 	bl	8000e7c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000886:	bf00      	nop
 8000888:	3728      	adds	r7, #40	@ 0x28
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800
 8000894:	40020c00 	.word	0x40020c00
 8000898:	40020800 	.word	0x40020800
 800089c:	40020000 	.word	0x40020000

080008a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008a8:	2001      	movs	r0, #1
 80008aa:	f003 fb1e 	bl	8003eea <osDelay>
 80008ae:	e7fb      	b.n	80008a8 <StartDefaultTask+0x8>

080008b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a04      	ldr	r2, [pc, #16]	@ (80008d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d101      	bne.n	80008c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008c2:	f000 f9e7 	bl	8000c94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40010000 	.word	0x40010000

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <Error_Handler+0x8>

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b12      	ldr	r3, [pc, #72]	@ (8000934 <HAL_MspInit+0x54>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ee:	4a11      	ldr	r2, [pc, #68]	@ (8000934 <HAL_MspInit+0x54>)
 80008f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000934 <HAL_MspInit+0x54>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	4b0b      	ldr	r3, [pc, #44]	@ (8000934 <HAL_MspInit+0x54>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090a:	4a0a      	ldr	r2, [pc, #40]	@ (8000934 <HAL_MspInit+0x54>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000910:	6413      	str	r3, [r2, #64]	@ 0x40
 8000912:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <HAL_MspInit+0x54>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	210f      	movs	r1, #15
 8000922:	f06f 0001 	mvn.w	r0, #1
 8000926:	f000 fa8d 	bl	8000e44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800

08000938 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	@ 0x28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a21      	ldr	r2, [pc, #132]	@ (80009dc <HAL_I2C_MspInit+0xa4>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d13b      	bne.n	80009d2 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	4b20      	ldr	r3, [pc, #128]	@ (80009e0 <HAL_I2C_MspInit+0xa8>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a1f      	ldr	r2, [pc, #124]	@ (80009e0 <HAL_I2C_MspInit+0xa8>)
 8000964:	f043 0302 	orr.w	r3, r3, #2
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b1d      	ldr	r3, [pc, #116]	@ (80009e0 <HAL_I2C_MspInit+0xa8>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000976:	23c0      	movs	r3, #192	@ 0xc0
 8000978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800097a:	2312      	movs	r3, #18
 800097c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000982:	2303      	movs	r3, #3
 8000984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000986:	2304      	movs	r3, #4
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4814      	ldr	r0, [pc, #80]	@ (80009e4 <HAL_I2C_MspInit+0xac>)
 8000992:	f000 fab1 	bl	8000ef8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <HAL_I2C_MspInit+0xa8>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099e:	4a10      	ldr	r2, [pc, #64]	@ (80009e0 <HAL_I2C_MspInit+0xa8>)
 80009a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a6:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <HAL_I2C_MspInit+0xa8>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2105      	movs	r1, #5
 80009b6:	201f      	movs	r0, #31
 80009b8:	f000 fa44 	bl	8000e44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80009bc:	201f      	movs	r0, #31
 80009be:	f000 fa5d 	bl	8000e7c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2105      	movs	r1, #5
 80009c6:	2020      	movs	r0, #32
 80009c8:	f000 fa3c 	bl	8000e44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80009cc:	2020      	movs	r0, #32
 80009ce:	f000 fa55 	bl	8000e7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009d2:	bf00      	nop
 80009d4:	3728      	adds	r7, #40	@ 0x28
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40005400 	.word	0x40005400
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020400 	.word	0x40020400

080009e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08c      	sub	sp, #48	@ 0x30
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	4b2f      	ldr	r3, [pc, #188]	@ (8000abc <HAL_InitTick+0xd4>)
 80009fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a00:	4a2e      	ldr	r2, [pc, #184]	@ (8000abc <HAL_InitTick+0xd4>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a08:	4b2c      	ldr	r3, [pc, #176]	@ (8000abc <HAL_InitTick+0xd4>)
 8000a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a14:	f107 020c 	add.w	r2, r7, #12
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f002 ff24 	bl	800386c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000a24:	f002 ff0e 	bl	8003844 <HAL_RCC_GetPCLK2Freq>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a30:	4a23      	ldr	r2, [pc, #140]	@ (8000ac0 <HAL_InitTick+0xd8>)
 8000a32:	fba2 2303 	umull	r2, r3, r2, r3
 8000a36:	0c9b      	lsrs	r3, r3, #18
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a3c:	4b21      	ldr	r3, [pc, #132]	@ (8000ac4 <HAL_InitTick+0xdc>)
 8000a3e:	4a22      	ldr	r2, [pc, #136]	@ (8000ac8 <HAL_InitTick+0xe0>)
 8000a40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a42:	4b20      	ldr	r3, [pc, #128]	@ (8000ac4 <HAL_InitTick+0xdc>)
 8000a44:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a48:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ac4 <HAL_InitTick+0xdc>)
 8000a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a4e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a50:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac4 <HAL_InitTick+0xdc>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a56:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac4 <HAL_InitTick+0xdc>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5c:	4b19      	ldr	r3, [pc, #100]	@ (8000ac4 <HAL_InitTick+0xdc>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a62:	4818      	ldr	r0, [pc, #96]	@ (8000ac4 <HAL_InitTick+0xdc>)
 8000a64:	f002 ff34 	bl	80038d0 <HAL_TIM_Base_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d11b      	bne.n	8000aae <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a76:	4813      	ldr	r0, [pc, #76]	@ (8000ac4 <HAL_InitTick+0xdc>)
 8000a78:	f002 ff84 	bl	8003984 <HAL_TIM_Base_Start_IT>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d111      	bne.n	8000aae <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a8a:	2019      	movs	r0, #25
 8000a8c:	f000 f9f6 	bl	8000e7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b0f      	cmp	r3, #15
 8000a94:	d808      	bhi.n	8000aa8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a96:	2200      	movs	r2, #0
 8000a98:	6879      	ldr	r1, [r7, #4]
 8000a9a:	2019      	movs	r0, #25
 8000a9c:	f000 f9d2 	bl	8000e44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8000acc <HAL_InitTick+0xe4>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6013      	str	r3, [r2, #0]
 8000aa6:	e002      	b.n	8000aae <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000aae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3730      	adds	r7, #48	@ 0x30
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	431bde83 	.word	0x431bde83
 8000ac4:	2000037c 	.word	0x2000037c
 8000ac8:	40010000 	.word	0x40010000
 8000acc:	20000004 	.word	0x20000004

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f000 fbc3 	bl	8001298 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000b12:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b16:	4808      	ldr	r0, [pc, #32]	@ (8000b38 <EXTI0_IRQHandler+0x30>)
 8000b18:	f000 fba3 	bl	8001262 <HAL_GPIO_TogglePin>
  if(var==0)
 8000b1c:	4b07      	ldr	r3, [pc, #28]	@ (8000b3c <EXTI0_IRQHandler+0x34>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d103      	bne.n	8000b2c <EXTI0_IRQHandler+0x24>
	  var=1;
 8000b24:	4b05      	ldr	r3, [pc, #20]	@ (8000b3c <EXTI0_IRQHandler+0x34>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	601a      	str	r2, [r3, #0]
  else
	  var=0;
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b2a:	e002      	b.n	8000b32 <EXTI0_IRQHandler+0x2a>
	  var=0;
 8000b2c:	4b03      	ldr	r3, [pc, #12]	@ (8000b3c <EXTI0_IRQHandler+0x34>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40020c00 	.word	0x40020c00
 8000b3c:	200003c4 	.word	0x200003c4

08000b40 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000b44:	2002      	movs	r0, #2
 8000b46:	f000 fba7 	bl	8001298 <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000b52:	2004      	movs	r0, #4
 8000b54:	f000 fba0 	bl	8001298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000b60:	2008      	movs	r0, #8
 8000b62:	f000 fb99 	bl	8001298 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000b66:	2201      	movs	r2, #1
 8000b68:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b6c:	4802      	ldr	r0, [pc, #8]	@ (8000b78 <EXTI3_IRQHandler+0x1c>)
 8000b6e:	f000 fb5f 	bl	8001230 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40020c00 	.word	0x40020c00

08000b7c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000b80:	2010      	movs	r0, #16
 8000b82:	f000 fb89 	bl	8001298 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b8c:	4802      	ldr	r0, [pc, #8]	@ (8000b98 <EXTI4_IRQHandler+0x1c>)
 8000b8e:	f000 fb4f 	bl	8001230 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40020c00 	.word	0x40020c00

08000b9c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ba0:	4802      	ldr	r0, [pc, #8]	@ (8000bac <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ba2:	f002 ff5f 	bl	8003a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	2000037c 	.word	0x2000037c

08000bb0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000bb4:	4802      	ldr	r0, [pc, #8]	@ (8000bc0 <I2C1_EV_IRQHandler+0x10>)
 8000bb6:	f000 fcec 	bl	8001592 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	2000031c 	.word	0x2000031c

08000bc4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000bc8:	4802      	ldr	r0, [pc, #8]	@ (8000bd4 <I2C1_ER_IRQHandler+0x10>)
 8000bca:	f000 fe35 	bl	8001838 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	2000031c 	.word	0x2000031c

08000bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <SystemInit+0x20>)
 8000bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000be2:	4a05      	ldr	r2, [pc, #20]	@ (8000bf8 <SystemInit+0x20>)
 8000be4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000be8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c34 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c00:	f7ff ffea 	bl	8000bd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c04:	480c      	ldr	r0, [pc, #48]	@ (8000c38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c06:	490d      	ldr	r1, [pc, #52]	@ (8000c3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c08:	4a0d      	ldr	r2, [pc, #52]	@ (8000c40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c2a:	f004 fbe1 	bl	80053f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2e:	f7ff fc9b 	bl	8000568 <main>
  bx  lr    
 8000c32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c40:	08005568 	.word	0x08005568
  ldr r2, =_sbss
 8000c44:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c48:	20004260 	.word	0x20004260

08000c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC_IRQHandler>
	...

08000c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c54:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0d      	ldr	r2, [pc, #52]	@ (8000c90 <HAL_Init+0x40>)
 8000c5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c60:	4b0b      	ldr	r3, [pc, #44]	@ (8000c90 <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0a      	ldr	r2, [pc, #40]	@ (8000c90 <HAL_Init+0x40>)
 8000c66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c6c:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a07      	ldr	r2, [pc, #28]	@ (8000c90 <HAL_Init+0x40>)
 8000c72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c78:	2003      	movs	r0, #3
 8000c7a:	f000 f8d8 	bl	8000e2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7e:	200f      	movs	r0, #15
 8000c80:	f7ff feb2 	bl	80009e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c84:	f7ff fe2c 	bl	80008e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023c00 	.word	0x40023c00

08000c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c98:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <HAL_IncTick+0x20>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <HAL_IncTick+0x24>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a04      	ldr	r2, [pc, #16]	@ (8000cb8 <HAL_IncTick+0x24>)
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	200003c8 	.word	0x200003c8

08000cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	@ (8000cd0 <HAL_GetTick+0x14>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	200003c8 	.word	0x200003c8

08000cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d06:	4a04      	ldr	r2, [pc, #16]	@ (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	60d3      	str	r3, [r2, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d20:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <__NVIC_GetPriorityGrouping+0x18>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	f003 0307 	and.w	r3, r3, #7
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	db0b      	blt.n	8000d62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	f003 021f 	and.w	r2, r3, #31
 8000d50:	4907      	ldr	r1, [pc, #28]	@ (8000d70 <__NVIC_EnableIRQ+0x38>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	095b      	lsrs	r3, r3, #5
 8000d58:	2001      	movs	r0, #1
 8000d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000e100 	.word	0xe000e100

08000d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db0a      	blt.n	8000d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	490c      	ldr	r1, [pc, #48]	@ (8000dc0 <__NVIC_SetPriority+0x4c>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	0112      	lsls	r2, r2, #4
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	440b      	add	r3, r1
 8000d98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d9c:	e00a      	b.n	8000db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4908      	ldr	r1, [pc, #32]	@ (8000dc4 <__NVIC_SetPriority+0x50>)
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	3b04      	subs	r3, #4
 8000dac:	0112      	lsls	r2, r2, #4
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	440b      	add	r3, r1
 8000db2:	761a      	strb	r2, [r3, #24]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000e100 	.word	0xe000e100
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	@ 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f1c3 0307 	rsb	r3, r3, #7
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	bf28      	it	cs
 8000de6:	2304      	movcs	r3, #4
 8000de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3304      	adds	r3, #4
 8000dee:	2b06      	cmp	r3, #6
 8000df0:	d902      	bls.n	8000df8 <NVIC_EncodePriority+0x30>
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3b03      	subs	r3, #3
 8000df6:	e000      	b.n	8000dfa <NVIC_EncodePriority+0x32>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43da      	mvns	r2, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	43d9      	mvns	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	4313      	orrs	r3, r2
         );
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3724      	adds	r7, #36	@ 0x24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ff4c 	bl	8000cd4 <__NVIC_SetPriorityGrouping>
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
 8000e50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e56:	f7ff ff61 	bl	8000d1c <__NVIC_GetPriorityGrouping>
 8000e5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	68b9      	ldr	r1, [r7, #8]
 8000e60:	6978      	ldr	r0, [r7, #20]
 8000e62:	f7ff ffb1 	bl	8000dc8 <NVIC_EncodePriority>
 8000e66:	4602      	mov	r2, r0
 8000e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff80 	bl	8000d74 <__NVIC_SetPriority>
}
 8000e74:	bf00      	nop
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ff54 	bl	8000d38 <__NVIC_EnableIRQ>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d004      	beq.n	8000eb6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2280      	movs	r2, #128	@ 0x80
 8000eb0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00c      	b.n	8000ed0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2205      	movs	r2, #5
 8000eba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 0201 	bic.w	r2, r2, #1
 8000ecc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000eea:	b2db      	uxtb	r3, r3
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	@ 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
 8000f12:	e16b      	b.n	80011ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f14:	2201      	movs	r2, #1
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	f040 815a 	bne.w	80011e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d005      	beq.n	8000f4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d130      	bne.n	8000fac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f80:	2201      	movs	r2, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	091b      	lsrs	r3, r3, #4
 8000f96:	f003 0201 	and.w	r2, r3, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d017      	beq.n	8000fe8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d123      	bne.n	800103c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	08da      	lsrs	r2, r3, #3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3208      	adds	r2, #8
 8000ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	f003 0307 	and.w	r3, r3, #7
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	220f      	movs	r2, #15
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	691a      	ldr	r2, [r3, #16]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	08da      	lsrs	r2, r3, #3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3208      	adds	r2, #8
 8001036:	69b9      	ldr	r1, [r7, #24]
 8001038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0203 	and.w	r2, r3, #3
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001078:	2b00      	cmp	r3, #0
 800107a:	f000 80b4 	beq.w	80011e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b60      	ldr	r3, [pc, #384]	@ (8001204 <HAL_GPIO_Init+0x30c>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001086:	4a5f      	ldr	r2, [pc, #380]	@ (8001204 <HAL_GPIO_Init+0x30c>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800108c:	6453      	str	r3, [r2, #68]	@ 0x44
 800108e:	4b5d      	ldr	r3, [pc, #372]	@ (8001204 <HAL_GPIO_Init+0x30c>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800109a:	4a5b      	ldr	r2, [pc, #364]	@ (8001208 <HAL_GPIO_Init+0x310>)
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	3302      	adds	r3, #2
 80010a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	220f      	movs	r2, #15
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a52      	ldr	r2, [pc, #328]	@ (800120c <HAL_GPIO_Init+0x314>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d02b      	beq.n	800111e <HAL_GPIO_Init+0x226>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a51      	ldr	r2, [pc, #324]	@ (8001210 <HAL_GPIO_Init+0x318>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d025      	beq.n	800111a <HAL_GPIO_Init+0x222>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a50      	ldr	r2, [pc, #320]	@ (8001214 <HAL_GPIO_Init+0x31c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d01f      	beq.n	8001116 <HAL_GPIO_Init+0x21e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4f      	ldr	r2, [pc, #316]	@ (8001218 <HAL_GPIO_Init+0x320>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d019      	beq.n	8001112 <HAL_GPIO_Init+0x21a>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4e      	ldr	r2, [pc, #312]	@ (800121c <HAL_GPIO_Init+0x324>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d013      	beq.n	800110e <HAL_GPIO_Init+0x216>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4d      	ldr	r2, [pc, #308]	@ (8001220 <HAL_GPIO_Init+0x328>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d00d      	beq.n	800110a <HAL_GPIO_Init+0x212>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001224 <HAL_GPIO_Init+0x32c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d007      	beq.n	8001106 <HAL_GPIO_Init+0x20e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4b      	ldr	r2, [pc, #300]	@ (8001228 <HAL_GPIO_Init+0x330>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d101      	bne.n	8001102 <HAL_GPIO_Init+0x20a>
 80010fe:	2307      	movs	r3, #7
 8001100:	e00e      	b.n	8001120 <HAL_GPIO_Init+0x228>
 8001102:	2308      	movs	r3, #8
 8001104:	e00c      	b.n	8001120 <HAL_GPIO_Init+0x228>
 8001106:	2306      	movs	r3, #6
 8001108:	e00a      	b.n	8001120 <HAL_GPIO_Init+0x228>
 800110a:	2305      	movs	r3, #5
 800110c:	e008      	b.n	8001120 <HAL_GPIO_Init+0x228>
 800110e:	2304      	movs	r3, #4
 8001110:	e006      	b.n	8001120 <HAL_GPIO_Init+0x228>
 8001112:	2303      	movs	r3, #3
 8001114:	e004      	b.n	8001120 <HAL_GPIO_Init+0x228>
 8001116:	2302      	movs	r3, #2
 8001118:	e002      	b.n	8001120 <HAL_GPIO_Init+0x228>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <HAL_GPIO_Init+0x228>
 800111e:	2300      	movs	r3, #0
 8001120:	69fa      	ldr	r2, [r7, #28]
 8001122:	f002 0203 	and.w	r2, r2, #3
 8001126:	0092      	lsls	r2, r2, #2
 8001128:	4093      	lsls	r3, r2
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001130:	4935      	ldr	r1, [pc, #212]	@ (8001208 <HAL_GPIO_Init+0x310>)
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	089b      	lsrs	r3, r3, #2
 8001136:	3302      	adds	r3, #2
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113e:	4b3b      	ldr	r3, [pc, #236]	@ (800122c <HAL_GPIO_Init+0x334>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001162:	4a32      	ldr	r2, [pc, #200]	@ (800122c <HAL_GPIO_Init+0x334>)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001168:	4b30      	ldr	r3, [pc, #192]	@ (800122c <HAL_GPIO_Init+0x334>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800118c:	4a27      	ldr	r2, [pc, #156]	@ (800122c <HAL_GPIO_Init+0x334>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001192:	4b26      	ldr	r3, [pc, #152]	@ (800122c <HAL_GPIO_Init+0x334>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011b6:	4a1d      	ldr	r2, [pc, #116]	@ (800122c <HAL_GPIO_Init+0x334>)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	@ (800122c <HAL_GPIO_Init+0x334>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011e0:	4a12      	ldr	r2, [pc, #72]	@ (800122c <HAL_GPIO_Init+0x334>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3301      	adds	r3, #1
 80011ea:	61fb      	str	r3, [r7, #28]
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	2b0f      	cmp	r3, #15
 80011f0:	f67f ae90 	bls.w	8000f14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3724      	adds	r7, #36	@ 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40013800 	.word	0x40013800
 800120c:	40020000 	.word	0x40020000
 8001210:	40020400 	.word	0x40020400
 8001214:	40020800 	.word	0x40020800
 8001218:	40020c00 	.word	0x40020c00
 800121c:	40021000 	.word	0x40021000
 8001220:	40021400 	.word	0x40021400
 8001224:	40021800 	.word	0x40021800
 8001228:	40021c00 	.word	0x40021c00
 800122c:	40013c00 	.word	0x40013c00

08001230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	807b      	strh	r3, [r7, #2]
 800123c:	4613      	mov	r3, r2
 800123e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001240:	787b      	ldrb	r3, [r7, #1]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001246:	887a      	ldrh	r2, [r7, #2]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800124c:	e003      	b.n	8001256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800124e:	887b      	ldrh	r3, [r7, #2]
 8001250:	041a      	lsls	r2, r3, #16
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	619a      	str	r2, [r3, #24]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001262:	b480      	push	{r7}
 8001264:	b085      	sub	sp, #20
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	460b      	mov	r3, r1
 800126c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001274:	887a      	ldrh	r2, [r7, #2]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4013      	ands	r3, r2
 800127a:	041a      	lsls	r2, r3, #16
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	43d9      	mvns	r1, r3
 8001280:	887b      	ldrh	r3, [r7, #2]
 8001282:	400b      	ands	r3, r1
 8001284:	431a      	orrs	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	619a      	str	r2, [r3, #24]
}
 800128a:	bf00      	nop
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012a2:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012a4:	695a      	ldr	r2, [r3, #20]
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	4013      	ands	r3, r2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d006      	beq.n	80012bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012ae:	4a05      	ldr	r2, [pc, #20]	@ (80012c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f806 	bl	80012c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40013c00 	.word	0x40013c00

080012c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e12b      	b.n	800154a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d106      	bne.n	800130c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff fb16 	bl	8000938 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2224      	movs	r2, #36	@ 0x24
 8001310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0201 	bic.w	r2, r2, #1
 8001322:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001332:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001342:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001344:	f002 fa6a 	bl	800381c <HAL_RCC_GetPCLK1Freq>
 8001348:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	4a81      	ldr	r2, [pc, #516]	@ (8001554 <HAL_I2C_Init+0x274>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d807      	bhi.n	8001364 <HAL_I2C_Init+0x84>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4a80      	ldr	r2, [pc, #512]	@ (8001558 <HAL_I2C_Init+0x278>)
 8001358:	4293      	cmp	r3, r2
 800135a:	bf94      	ite	ls
 800135c:	2301      	movls	r3, #1
 800135e:	2300      	movhi	r3, #0
 8001360:	b2db      	uxtb	r3, r3
 8001362:	e006      	b.n	8001372 <HAL_I2C_Init+0x92>
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4a7d      	ldr	r2, [pc, #500]	@ (800155c <HAL_I2C_Init+0x27c>)
 8001368:	4293      	cmp	r3, r2
 800136a:	bf94      	ite	ls
 800136c:	2301      	movls	r3, #1
 800136e:	2300      	movhi	r3, #0
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e0e7      	b.n	800154a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4a78      	ldr	r2, [pc, #480]	@ (8001560 <HAL_I2C_Init+0x280>)
 800137e:	fba2 2303 	umull	r2, r3, r2, r3
 8001382:	0c9b      	lsrs	r3, r3, #18
 8001384:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	430a      	orrs	r2, r1
 8001398:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	4a6a      	ldr	r2, [pc, #424]	@ (8001554 <HAL_I2C_Init+0x274>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d802      	bhi.n	80013b4 <HAL_I2C_Init+0xd4>
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	3301      	adds	r3, #1
 80013b2:	e009      	b.n	80013c8 <HAL_I2C_Init+0xe8>
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80013ba:	fb02 f303 	mul.w	r3, r2, r3
 80013be:	4a69      	ldr	r2, [pc, #420]	@ (8001564 <HAL_I2C_Init+0x284>)
 80013c0:	fba2 2303 	umull	r2, r3, r2, r3
 80013c4:	099b      	lsrs	r3, r3, #6
 80013c6:	3301      	adds	r3, #1
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	6812      	ldr	r2, [r2, #0]
 80013cc:	430b      	orrs	r3, r1
 80013ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80013da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	495c      	ldr	r1, [pc, #368]	@ (8001554 <HAL_I2C_Init+0x274>)
 80013e4:	428b      	cmp	r3, r1
 80013e6:	d819      	bhi.n	800141c <HAL_I2C_Init+0x13c>
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	1e59      	subs	r1, r3, #1
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80013f6:	1c59      	adds	r1, r3, #1
 80013f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80013fc:	400b      	ands	r3, r1
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d00a      	beq.n	8001418 <HAL_I2C_Init+0x138>
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	1e59      	subs	r1, r3, #1
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001410:	3301      	adds	r3, #1
 8001412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001416:	e051      	b.n	80014bc <HAL_I2C_Init+0x1dc>
 8001418:	2304      	movs	r3, #4
 800141a:	e04f      	b.n	80014bc <HAL_I2C_Init+0x1dc>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d111      	bne.n	8001448 <HAL_I2C_Init+0x168>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	1e58      	subs	r0, r3, #1
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6859      	ldr	r1, [r3, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	440b      	add	r3, r1
 8001432:	fbb0 f3f3 	udiv	r3, r0, r3
 8001436:	3301      	adds	r3, #1
 8001438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800143c:	2b00      	cmp	r3, #0
 800143e:	bf0c      	ite	eq
 8001440:	2301      	moveq	r3, #1
 8001442:	2300      	movne	r3, #0
 8001444:	b2db      	uxtb	r3, r3
 8001446:	e012      	b.n	800146e <HAL_I2C_Init+0x18e>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	1e58      	subs	r0, r3, #1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6859      	ldr	r1, [r3, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	0099      	lsls	r1, r3, #2
 8001458:	440b      	add	r3, r1
 800145a:	fbb0 f3f3 	udiv	r3, r0, r3
 800145e:	3301      	adds	r3, #1
 8001460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001464:	2b00      	cmp	r3, #0
 8001466:	bf0c      	ite	eq
 8001468:	2301      	moveq	r3, #1
 800146a:	2300      	movne	r3, #0
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_I2C_Init+0x196>
 8001472:	2301      	movs	r3, #1
 8001474:	e022      	b.n	80014bc <HAL_I2C_Init+0x1dc>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10e      	bne.n	800149c <HAL_I2C_Init+0x1bc>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	1e58      	subs	r0, r3, #1
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6859      	ldr	r1, [r3, #4]
 8001486:	460b      	mov	r3, r1
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	440b      	add	r3, r1
 800148c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001490:	3301      	adds	r3, #1
 8001492:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001496:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800149a:	e00f      	b.n	80014bc <HAL_I2C_Init+0x1dc>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	1e58      	subs	r0, r3, #1
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6859      	ldr	r1, [r3, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	0099      	lsls	r1, r3, #2
 80014ac:	440b      	add	r3, r1
 80014ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80014b2:	3301      	adds	r3, #1
 80014b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	6809      	ldr	r1, [r1, #0]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69da      	ldr	r2, [r3, #28]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	430a      	orrs	r2, r1
 80014de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80014ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	6911      	ldr	r1, [r2, #16]
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	68d2      	ldr	r2, [r2, #12]
 80014f6:	4311      	orrs	r1, r2
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6812      	ldr	r2, [r2, #0]
 80014fc:	430b      	orrs	r3, r1
 80014fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	695a      	ldr	r2, [r3, #20]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	431a      	orrs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 0201 	orr.w	r2, r2, #1
 800152a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2220      	movs	r2, #32
 8001536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	000186a0 	.word	0x000186a0
 8001558:	001e847f 	.word	0x001e847f
 800155c:	003d08ff 	.word	0x003d08ff
 8001560:	431bde83 	.word	0x431bde83
 8001564:	10624dd3 	.word	0x10624dd3

08001568 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800157a:	2b80      	cmp	r3, #128	@ 0x80
 800157c:	d103      	bne.n	8001586 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2200      	movs	r2, #0
 8001584:	611a      	str	r2, [r3, #16]
  }
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b088      	sub	sp, #32
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015aa:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80015b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015ba:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	2b10      	cmp	r3, #16
 80015c0:	d003      	beq.n	80015ca <HAL_I2C_EV_IRQHandler+0x38>
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	2b40      	cmp	r3, #64	@ 0x40
 80015c6:	f040 80b1 	bne.w	800172c <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d10d      	bne.n	8001600 <HAL_I2C_EV_IRQHandler+0x6e>
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80015ea:	d003      	beq.n	80015f4 <HAL_I2C_EV_IRQHandler+0x62>
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80015f2:	d101      	bne.n	80015f8 <HAL_I2C_EV_IRQHandler+0x66>
 80015f4:	2301      	movs	r3, #1
 80015f6:	e000      	b.n	80015fa <HAL_I2C_EV_IRQHandler+0x68>
 80015f8:	2300      	movs	r3, #0
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	f000 8114 	beq.w	8001828 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00b      	beq.n	8001622 <HAL_I2C_EV_IRQHandler+0x90>
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001610:	2b00      	cmp	r3, #0
 8001612:	d006      	beq.n	8001622 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f001 fc75 	bl	8002f04 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 fd7a 	bl	8002114 <I2C_Master_SB>
 8001620:	e083      	b.n	800172a <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	2b00      	cmp	r3, #0
 800162a:	d008      	beq.n	800163e <HAL_I2C_EV_IRQHandler+0xac>
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 fdf2 	bl	8002220 <I2C_Master_ADD10>
 800163c:	e075      	b.n	800172a <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d008      	beq.n	800165a <HAL_I2C_EV_IRQHandler+0xc8>
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 fe0e 	bl	8002274 <I2C_Master_ADDR>
 8001658:	e067      	b.n	800172a <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	2b00      	cmp	r3, #0
 8001662:	d036      	beq.n	80016d2 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800166e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001672:	f000 80db 	beq.w	800182c <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00d      	beq.n	800169c <HAL_I2C_EV_IRQHandler+0x10a>
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001686:	2b00      	cmp	r3, #0
 8001688:	d008      	beq.n	800169c <HAL_I2C_EV_IRQHandler+0x10a>
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d103      	bne.n	800169c <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f000 f9d6 	bl	8001a46 <I2C_MasterTransmit_TXE>
 800169a:	e046      	b.n	800172a <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 80c2 	beq.w	800182c <HAL_I2C_EV_IRQHandler+0x29a>
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 80bc 	beq.w	800182c <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80016b4:	7bbb      	ldrb	r3, [r7, #14]
 80016b6:	2b21      	cmp	r3, #33	@ 0x21
 80016b8:	d103      	bne.n	80016c2 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 fa5f 	bl	8001b7e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016c0:	e0b4      	b.n	800182c <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	2b40      	cmp	r3, #64	@ 0x40
 80016c6:	f040 80b1 	bne.w	800182c <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 facd 	bl	8001c6a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016d0:	e0ac      	b.n	800182c <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80016e0:	f000 80a4 	beq.w	800182c <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00d      	beq.n	800170a <HAL_I2C_EV_IRQHandler+0x178>
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d008      	beq.n	800170a <HAL_I2C_EV_IRQHandler+0x178>
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d103      	bne.n	800170a <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 fb49 	bl	8001d9a <I2C_MasterReceive_RXNE>
 8001708:	e00f      	b.n	800172a <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 808b 	beq.w	800182c <HAL_I2C_EV_IRQHandler+0x29a>
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 8085 	beq.w	800182c <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 fc01 	bl	8001f2a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001728:	e080      	b.n	800182c <HAL_I2C_EV_IRQHandler+0x29a>
 800172a:	e07f      	b.n	800182c <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001730:	2b00      	cmp	r3, #0
 8001732:	d004      	beq.n	800173e <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	61fb      	str	r3, [r7, #28]
 800173c:	e007      	b.n	800174e <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d011      	beq.n	800177c <HAL_I2C_EV_IRQHandler+0x1ea>
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00c      	beq.n	800177c <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001772:	69b9      	ldr	r1, [r7, #24]
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 ffcc 	bl	8002712 <I2C_Slave_ADDR>
 800177a:	e05a      	b.n	8001832 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	2b00      	cmp	r3, #0
 8001784:	d008      	beq.n	8001798 <HAL_I2C_EV_IRQHandler+0x206>
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f001 f807 	bl	80027a4 <I2C_Slave_STOPF>
 8001796:	e04c      	b.n	8001832 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001798:	7bbb      	ldrb	r3, [r7, #14]
 800179a:	2b21      	cmp	r3, #33	@ 0x21
 800179c:	d002      	beq.n	80017a4 <HAL_I2C_EV_IRQHandler+0x212>
 800179e:	7bbb      	ldrb	r3, [r7, #14]
 80017a0:	2b29      	cmp	r3, #41	@ 0x29
 80017a2:	d120      	bne.n	80017e6 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00d      	beq.n	80017ca <HAL_I2C_EV_IRQHandler+0x238>
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d008      	beq.n	80017ca <HAL_I2C_EV_IRQHandler+0x238>
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d103      	bne.n	80017ca <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 fee7 	bl	8002596 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017c8:	e032      	b.n	8001830 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d02d      	beq.n	8001830 <HAL_I2C_EV_IRQHandler+0x29e>
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d028      	beq.n	8001830 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 ff16 	bl	8002610 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017e4:	e024      	b.n	8001830 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00d      	beq.n	800180c <HAL_I2C_EV_IRQHandler+0x27a>
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d008      	beq.n	800180c <HAL_I2C_EV_IRQHandler+0x27a>
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	d103      	bne.n	800180c <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 ff24 	bl	8002652 <I2C_SlaveReceive_RXNE>
 800180a:	e012      	b.n	8001832 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00d      	beq.n	8001832 <HAL_I2C_EV_IRQHandler+0x2a0>
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800181c:	2b00      	cmp	r3, #0
 800181e:	d008      	beq.n	8001832 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 ff54 	bl	80026ce <I2C_SlaveReceive_BTF>
 8001826:	e004      	b.n	8001832 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001828:	bf00      	nop
 800182a:	e002      	b.n	8001832 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800182c:	bf00      	nop
 800182e:	e000      	b.n	8001832 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001830:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001832:	3720      	adds	r7, #32
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	@ 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001850:	2300      	movs	r3, #0
 8001852:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800185a:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800185c:	6a3b      	ldr	r3, [r7, #32]
 800185e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00d      	beq.n	8001882 <HAL_I2C_ER_IRQHandler+0x4a>
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800186c:	2b00      	cmp	r3, #0
 800186e:	d008      	beq.n	8001882 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001880:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001882:	6a3b      	ldr	r3, [r7, #32]
 8001884:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00d      	beq.n	80018a8 <HAL_I2C_ER_IRQHandler+0x70>
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001892:	2b00      	cmp	r3, #0
 8001894:	d008      	beq.n	80018a8 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001898:	f043 0302 	orr.w	r3, r3, #2
 800189c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80018a6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80018a8:	6a3b      	ldr	r3, [r7, #32]
 80018aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d03e      	beq.n	8001930 <HAL_I2C_ER_IRQHandler+0xf8>
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d039      	beq.n	8001930 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80018bc:	7efb      	ldrb	r3, [r7, #27]
 80018be:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018ce:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d4:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80018d6:	7ebb      	ldrb	r3, [r7, #26]
 80018d8:	2b20      	cmp	r3, #32
 80018da:	d112      	bne.n	8001902 <HAL_I2C_ER_IRQHandler+0xca>
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10f      	bne.n	8001902 <HAL_I2C_ER_IRQHandler+0xca>
 80018e2:	7cfb      	ldrb	r3, [r7, #19]
 80018e4:	2b21      	cmp	r3, #33	@ 0x21
 80018e6:	d008      	beq.n	80018fa <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80018e8:	7cfb      	ldrb	r3, [r7, #19]
 80018ea:	2b29      	cmp	r3, #41	@ 0x29
 80018ec:	d005      	beq.n	80018fa <HAL_I2C_ER_IRQHandler+0xc2>
 80018ee:	7cfb      	ldrb	r3, [r7, #19]
 80018f0:	2b28      	cmp	r3, #40	@ 0x28
 80018f2:	d106      	bne.n	8001902 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b21      	cmp	r3, #33	@ 0x21
 80018f8:	d103      	bne.n	8001902 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f001 f882 	bl	8002a04 <I2C_Slave_AF>
 8001900:	e016      	b.n	8001930 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800190a:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800190c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190e:	f043 0304 	orr.w	r3, r3, #4
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001914:	7efb      	ldrb	r3, [r7, #27]
 8001916:	2b10      	cmp	r3, #16
 8001918:	d002      	beq.n	8001920 <HAL_I2C_ER_IRQHandler+0xe8>
 800191a:	7efb      	ldrb	r3, [r7, #27]
 800191c:	2b40      	cmp	r3, #64	@ 0x40
 800191e:	d107      	bne.n	8001930 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800192e:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001930:	6a3b      	ldr	r3, [r7, #32]
 8001932:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00d      	beq.n	8001956 <HAL_I2C_ER_IRQHandler+0x11e>
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001940:	2b00      	cmp	r3, #0
 8001942:	d008      	beq.n	8001956 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001946:	f043 0308 	orr.w	r3, r3, #8
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8001954:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001958:	2b00      	cmp	r3, #0
 800195a:	d008      	beq.n	800196e <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f001 f8bf 	bl	8002aec <I2C_ITError>
  }
}
 800196e:	bf00      	nop
 8001970:	3728      	adds	r7, #40	@ 0x28
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	460b      	mov	r3, r1
 80019d0:	70fb      	strb	r3, [r7, #3]
 80019d2:	4613      	mov	r3, r2
 80019d4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b084      	sub	sp, #16
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a54:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a5c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a62:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d150      	bne.n	8001b0e <I2C_MasterTransmit_TXE+0xc8>
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
 8001a6e:	2b21      	cmp	r3, #33	@ 0x21
 8001a70:	d14d      	bne.n	8001b0e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d01d      	beq.n	8001ab4 <I2C_MasterTransmit_TXE+0x6e>
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2b20      	cmp	r3, #32
 8001a7c:	d01a      	beq.n	8001ab4 <I2C_MasterTransmit_TXE+0x6e>
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001a84:	d016      	beq.n	8001ab4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001a94:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2211      	movs	r2, #17
 8001a9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff ff62 	bl	8001976 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ab2:	e060      	b.n	8001b76 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001ac2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ad2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2220      	movs	r2, #32
 8001ade:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b40      	cmp	r3, #64	@ 0x40
 8001aec:	d107      	bne.n	8001afe <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff ff7d 	bl	80019f6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001afc:	e03b      	b.n	8001b76 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ff35 	bl	8001976 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b0c:	e033      	b.n	8001b76 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
 8001b10:	2b21      	cmp	r3, #33	@ 0x21
 8001b12:	d005      	beq.n	8001b20 <I2C_MasterTransmit_TXE+0xda>
 8001b14:	7bbb      	ldrb	r3, [r7, #14]
 8001b16:	2b40      	cmp	r3, #64	@ 0x40
 8001b18:	d12d      	bne.n	8001b76 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
 8001b1c:	2b22      	cmp	r3, #34	@ 0x22
 8001b1e:	d12a      	bne.n	8001b76 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d108      	bne.n	8001b3c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b38:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001b3a:	e01c      	b.n	8001b76 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b40      	cmp	r3, #64	@ 0x40
 8001b46:	d103      	bne.n	8001b50 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f88e 	bl	8001c6a <I2C_MemoryTransmit_TXE_BTF>
}
 8001b4e:	e012      	b.n	8001b76 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b54:	781a      	ldrb	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001b74:	e7ff      	b.n	8001b76 <I2C_MasterTransmit_TXE+0x130>
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b084      	sub	sp, #16
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b8a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b21      	cmp	r3, #33	@ 0x21
 8001b96:	d164      	bne.n	8001c62 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d012      	beq.n	8001bc8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba6:	781a      	ldrb	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001bc6:	e04c      	b.n	8001c62 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2b08      	cmp	r3, #8
 8001bcc:	d01d      	beq.n	8001c0a <I2C_MasterTransmit_BTF+0x8c>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2b20      	cmp	r3, #32
 8001bd2:	d01a      	beq.n	8001c0a <I2C_MasterTransmit_BTF+0x8c>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001bda:	d016      	beq.n	8001c0a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001bea:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2211      	movs	r2, #17
 8001bf0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff feb7 	bl	8001976 <HAL_I2C_MasterTxCpltCallback>
}
 8001c08:	e02b      	b.n	8001c62 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001c18:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c28:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2220      	movs	r2, #32
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b40      	cmp	r3, #64	@ 0x40
 8001c42:	d107      	bne.n	8001c54 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff fed2 	bl	80019f6 <HAL_I2C_MemTxCpltCallback>
}
 8001c52:	e006      	b.n	8001c62 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff fe8a 	bl	8001976 <HAL_I2C_MasterTxCpltCallback>
}
 8001c62:	bf00      	nop
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b084      	sub	sp, #16
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c78:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d11d      	bne.n	8001cbe <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d10b      	bne.n	8001ca2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c9a:	1c9a      	adds	r2, r3, #2
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001ca0:	e077      	b.n	8001d92 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	121b      	asrs	r3, r3, #8
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001cbc:	e069      	b.n	8001d92 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d10b      	bne.n	8001cde <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001cdc:	e059      	b.n	8001d92 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d152      	bne.n	8001d8c <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	2b22      	cmp	r3, #34	@ 0x22
 8001cea:	d10d      	bne.n	8001d08 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cfa:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001d06:	e044      	b.n	8001d92 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d015      	beq.n	8001d3e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	2b21      	cmp	r3, #33	@ 0x21
 8001d16:	d112      	bne.n	8001d3e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1c:	781a      	ldrb	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	3b01      	subs	r3, #1
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001d3c:	e029      	b.n	8001d92 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d124      	bne.n	8001d92 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
 8001d4a:	2b21      	cmp	r3, #33	@ 0x21
 8001d4c:	d121      	bne.n	8001d92 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001d5c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d6c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2220      	movs	r2, #32
 8001d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff fe36 	bl	80019f6 <HAL_I2C_MemTxCpltCallback>
}
 8001d8a:	e002      	b.n	8001d92 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff fbeb 	bl	8001568 <I2C_Flush_DR>
}
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b084      	sub	sp, #16
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b22      	cmp	r3, #34	@ 0x22
 8001dac:	f040 80b9 	bne.w	8001f22 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db4:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d921      	bls.n	8001e08 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691a      	ldr	r2, [r3, #16]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	3b01      	subs	r3, #1
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	f040 8096 	bne.w	8001f22 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e04:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001e06:	e08c      	b.n	8001f22 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d07f      	beq.n	8001f10 <I2C_MasterReceive_RXNE+0x176>
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d002      	beq.n	8001e1c <I2C_MasterReceive_RXNE+0x82>
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d179      	bne.n	8001f10 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f001 f83f 	bl	8002ea0 <I2C_WaitOnSTOPRequestThroughIT>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d14c      	bne.n	8001ec2 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e36:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001e46:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691a      	ldr	r2, [r3, #16]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	3b01      	subs	r3, #1
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2220      	movs	r2, #32
 8001e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b40      	cmp	r3, #64	@ 0x40
 8001e80:	d10a      	bne.n	8001e98 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff fdba 	bl	8001a0a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001e96:	e044      	b.n	8001f22 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d002      	beq.n	8001eac <I2C_MasterReceive_RXNE+0x112>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2b20      	cmp	r3, #32
 8001eaa:	d103      	bne.n	8001eb4 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001eb2:	e002      	b.n	8001eba <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2212      	movs	r2, #18
 8001eb8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff fd65 	bl	800198a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001ec0:	e02f      	b.n	8001f22 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001ed0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2220      	movs	r2, #32
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff fd88 	bl	8001a1e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001f0e:	e008      	b.n	8001f22 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f1e:	605a      	str	r2, [r3, #4]
}
 8001f20:	e7ff      	b.n	8001f22 <I2C_MasterReceive_RXNE+0x188>
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b084      	sub	sp, #16
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f36:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d11b      	bne.n	8001f7a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f50:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	3b01      	subs	r3, #1
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001f78:	e0c8      	b.n	800210c <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	d129      	bne.n	8001fd8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f92:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d00a      	beq.n	8001fb0 <I2C_MasterReceive_BTF+0x86>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d007      	beq.n	8001fb0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	691a      	ldr	r2, [r3, #16]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc2:	1c5a      	adds	r2, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001fd6:	e099      	b.n	800210c <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	f040 8081 	bne.w	80020e6 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d002      	beq.n	8001ff0 <I2C_MasterReceive_BTF+0xc6>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2b10      	cmp	r3, #16
 8001fee:	d108      	bne.n	8002002 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	e019      	b.n	8002036 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b04      	cmp	r3, #4
 8002006:	d002      	beq.n	800200e <I2C_MasterReceive_BTF+0xe4>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d108      	bne.n	8002020 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	e00a      	b.n	8002036 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2b10      	cmp	r3, #16
 8002024:	d007      	beq.n	8002036 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002034:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002052:	b29b      	uxth	r3, r3
 8002054:	3b01      	subs	r3, #1
 8002056:	b29a      	uxth	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691a      	ldr	r2, [r3, #16]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206e:	1c5a      	adds	r2, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002078:	b29b      	uxth	r3, r3
 800207a:	3b01      	subs	r3, #1
 800207c:	b29a      	uxth	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002090:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2220      	movs	r2, #32
 8002096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b40      	cmp	r3, #64	@ 0x40
 80020a4:	d10a      	bne.n	80020bc <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff fca8 	bl	8001a0a <HAL_I2C_MemRxCpltCallback>
}
 80020ba:	e027      	b.n	800210c <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d002      	beq.n	80020d0 <I2C_MasterReceive_BTF+0x1a6>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2b20      	cmp	r3, #32
 80020ce:	d103      	bne.n	80020d8 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80020d6:	e002      	b.n	80020de <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2212      	movs	r2, #18
 80020dc:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff fc53 	bl	800198a <HAL_I2C_MasterRxCpltCallback>
}
 80020e4:	e012      	b.n	800210c <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	691a      	ldr	r2, [r3, #16]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f8:	1c5a      	adds	r2, r3, #1
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002102:	b29b      	uxth	r3, r3
 8002104:	3b01      	subs	r3, #1
 8002106:	b29a      	uxth	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800210c:	bf00      	nop
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b40      	cmp	r3, #64	@ 0x40
 8002126:	d117      	bne.n	8002158 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800212c:	2b00      	cmp	r3, #0
 800212e:	d109      	bne.n	8002144 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002134:	b2db      	uxtb	r3, r3
 8002136:	461a      	mov	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002140:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002142:	e067      	b.n	8002214 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002148:	b2db      	uxtb	r3, r3
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	b2da      	uxtb	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	611a      	str	r2, [r3, #16]
}
 8002156:	e05d      	b.n	8002214 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002160:	d133      	bne.n	80021ca <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b21      	cmp	r3, #33	@ 0x21
 800216c:	d109      	bne.n	8002182 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002172:	b2db      	uxtb	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800217e:	611a      	str	r2, [r3, #16]
 8002180:	e008      	b.n	8002194 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002186:	b2db      	uxtb	r3, r3
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	b2da      	uxtb	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002198:	2b00      	cmp	r3, #0
 800219a:	d004      	beq.n	80021a6 <I2C_Master_SB+0x92>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d108      	bne.n	80021b8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d032      	beq.n	8002214 <I2C_Master_SB+0x100>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d02d      	beq.n	8002214 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021c6:	605a      	str	r2, [r3, #4]
}
 80021c8:	e024      	b.n	8002214 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10e      	bne.n	80021f0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	11db      	asrs	r3, r3, #7
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	f003 0306 	and.w	r3, r3, #6
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	f063 030f 	orn	r3, r3, #15
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	611a      	str	r2, [r3, #16]
}
 80021ee:	e011      	b.n	8002214 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d10d      	bne.n	8002214 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	11db      	asrs	r3, r3, #7
 8002200:	b2db      	uxtb	r3, r3
 8002202:	f003 0306 	and.w	r3, r3, #6
 8002206:	b2db      	uxtb	r3, r3
 8002208:	f063 030e 	orn	r3, r3, #14
 800220c:	b2da      	uxtb	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	611a      	str	r2, [r3, #16]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222c:	b2da      	uxtb	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002238:	2b00      	cmp	r3, #0
 800223a:	d004      	beq.n	8002246 <I2C_Master_ADD10+0x26>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002242:	2b00      	cmp	r3, #0
 8002244:	d108      	bne.n	8002258 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00c      	beq.n	8002268 <I2C_Master_ADD10+0x48>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002254:	2b00      	cmp	r3, #0
 8002256:	d007      	beq.n	8002268 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002266:	605a      	str	r2, [r3, #4]
  }
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002274:	b480      	push	{r7}
 8002276:	b091      	sub	sp, #68	@ 0x44
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002282:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002290:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b22      	cmp	r3, #34	@ 0x22
 800229c:	f040 8169 	bne.w	8002572 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10f      	bne.n	80022c8 <I2C_Master_ADDR+0x54>
 80022a8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80022ac:	2b40      	cmp	r3, #64	@ 0x40
 80022ae:	d10b      	bne.n	80022c8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022b0:	2300      	movs	r3, #0
 80022b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80022c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c6:	e160      	b.n	800258a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d11d      	bne.n	800230c <I2C_Master_ADDR+0x98>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80022d8:	d118      	bne.n	800230c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022da:	2300      	movs	r3, #0
 80022dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022fe:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	651a      	str	r2, [r3, #80]	@ 0x50
 800230a:	e13e      	b.n	800258a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002310:	b29b      	uxth	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d113      	bne.n	800233e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002316:	2300      	movs	r3, #0
 8002318:	62bb      	str	r3, [r7, #40]	@ 0x28
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	62bb      	str	r3, [r7, #40]	@ 0x28
 800232a:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	e115      	b.n	800256a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002342:	b29b      	uxth	r3, r3
 8002344:	2b01      	cmp	r3, #1
 8002346:	f040 808a 	bne.w	800245e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800234a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800234c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002350:	d137      	bne.n	80023c2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002360:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800236c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002370:	d113      	bne.n	800239a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002380:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002382:	2300      	movs	r3, #0
 8002384:	627b      	str	r3, [r7, #36]	@ 0x24
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	627b      	str	r3, [r7, #36]	@ 0x24
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	627b      	str	r3, [r7, #36]	@ 0x24
 8002396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002398:	e0e7      	b.n	800256a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800239a:	2300      	movs	r3, #0
 800239c:	623b      	str	r3, [r7, #32]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	623b      	str	r3, [r7, #32]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	623b      	str	r3, [r7, #32]
 80023ae:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	e0d3      	b.n	800256a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80023c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d02e      	beq.n	8002426 <I2C_Master_ADDR+0x1b2>
 80023c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023ca:	2b20      	cmp	r3, #32
 80023cc:	d02b      	beq.n	8002426 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80023ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023d0:	2b12      	cmp	r3, #18
 80023d2:	d102      	bne.n	80023da <I2C_Master_ADDR+0x166>
 80023d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d125      	bne.n	8002426 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80023da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d00e      	beq.n	80023fe <I2C_Master_ADDR+0x18a>
 80023e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d00b      	beq.n	80023fe <I2C_Master_ADDR+0x18a>
 80023e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e8:	2b10      	cmp	r3, #16
 80023ea:	d008      	beq.n	80023fe <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	e007      	b.n	800240e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800240c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	61fb      	str	r3, [r7, #28]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	61fb      	str	r3, [r7, #28]
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	e0a1      	b.n	800256a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002434:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002436:	2300      	movs	r3, #0
 8002438:	61bb      	str	r3, [r7, #24]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	61bb      	str	r3, [r7, #24]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	61bb      	str	r3, [r7, #24]
 800244a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	e085      	b.n	800256a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002462:	b29b      	uxth	r3, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d14d      	bne.n	8002504 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800246a:	2b04      	cmp	r3, #4
 800246c:	d016      	beq.n	800249c <I2C_Master_ADDR+0x228>
 800246e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002470:	2b02      	cmp	r3, #2
 8002472:	d013      	beq.n	800249c <I2C_Master_ADDR+0x228>
 8002474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002476:	2b10      	cmp	r3, #16
 8002478:	d010      	beq.n	800249c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002488:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e007      	b.n	80024ac <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80024aa:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024ba:	d117      	bne.n	80024ec <I2C_Master_ADDR+0x278>
 80024bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024be:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80024c2:	d00b      	beq.n	80024dc <I2C_Master_ADDR+0x268>
 80024c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d008      	beq.n	80024dc <I2C_Master_ADDR+0x268>
 80024ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d005      	beq.n	80024dc <I2C_Master_ADDR+0x268>
 80024d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024d2:	2b10      	cmp	r3, #16
 80024d4:	d002      	beq.n	80024dc <I2C_Master_ADDR+0x268>
 80024d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024d8:	2b20      	cmp	r3, #32
 80024da:	d107      	bne.n	80024ec <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80024ea:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	e032      	b.n	800256a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002512:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800251e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002522:	d117      	bne.n	8002554 <I2C_Master_ADDR+0x2e0>
 8002524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002526:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800252a:	d00b      	beq.n	8002544 <I2C_Master_ADDR+0x2d0>
 800252c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800252e:	2b01      	cmp	r3, #1
 8002530:	d008      	beq.n	8002544 <I2C_Master_ADDR+0x2d0>
 8002532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002534:	2b08      	cmp	r3, #8
 8002536:	d005      	beq.n	8002544 <I2C_Master_ADDR+0x2d0>
 8002538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800253a:	2b10      	cmp	r3, #16
 800253c:	d002      	beq.n	8002544 <I2C_Master_ADDR+0x2d0>
 800253e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002540:	2b20      	cmp	r3, #32
 8002542:	d107      	bne.n	8002554 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002552:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002554:	2300      	movs	r3, #0
 8002556:	613b      	str	r3, [r7, #16]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002570:	e00b      	b.n	800258a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	68fb      	ldr	r3, [r7, #12]
}
 8002588:	e7ff      	b.n	800258a <I2C_Master_ADDR+0x316>
 800258a:	bf00      	nop
 800258c:	3744      	adds	r7, #68	@ 0x44
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b084      	sub	sp, #16
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025a4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d02b      	beq.n	8002608 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b4:	781a      	ldrb	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d114      	bne.n	8002608 <I2C_SlaveTransmit_TXE+0x72>
 80025de:	7bfb      	ldrb	r3, [r7, #15]
 80025e0:	2b29      	cmp	r3, #41	@ 0x29
 80025e2:	d111      	bne.n	8002608 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025f2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2221      	movs	r2, #33	@ 0x21
 80025f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2228      	movs	r2, #40	@ 0x28
 80025fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff f9cb 	bl	800199e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002608:	bf00      	nop
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800261c:	b29b      	uxth	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d011      	beq.n	8002646 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002626:	781a      	ldrb	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800263c:	b29b      	uxth	r3, r3
 800263e:	3b01      	subs	r3, #1
 8002640:	b29a      	uxth	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b084      	sub	sp, #16
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002660:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002666:	b29b      	uxth	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	d02c      	beq.n	80026c6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691a      	ldr	r2, [r3, #16]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002688:	b29b      	uxth	r3, r3
 800268a:	3b01      	subs	r3, #1
 800268c:	b29a      	uxth	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002696:	b29b      	uxth	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d114      	bne.n	80026c6 <I2C_SlaveReceive_RXNE+0x74>
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	2b2a      	cmp	r3, #42	@ 0x2a
 80026a0:	d111      	bne.n	80026c6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026b0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2222      	movs	r2, #34	@ 0x22
 80026b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2228      	movs	r2, #40	@ 0x28
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff f976 	bl	80019b2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80026c6:	bf00      	nop
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026da:	b29b      	uxth	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d012      	beq.n	8002706 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691a      	ldr	r2, [r3, #16]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800271c:	2300      	movs	r3, #0
 800271e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800272c:	2b28      	cmp	r3, #40	@ 0x28
 800272e:	d125      	bne.n	800277c <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800273e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800274a:	2301      	movs	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002754:	2b00      	cmp	r3, #0
 8002756:	d103      	bne.n	8002760 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	81bb      	strh	r3, [r7, #12]
 800275e:	e002      	b.n	8002766 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800276e:	89ba      	ldrh	r2, [r7, #12]
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	4619      	mov	r1, r3
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff f926 	bl	80019c6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800277a:	e00e      	b.n	800279a <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800277c:	2300      	movs	r3, #0
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027b2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80027c2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80027c4:	2300      	movs	r3, #0
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0201 	orr.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027f0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002800:	d172      	bne.n	80028e8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	2b22      	cmp	r3, #34	@ 0x22
 8002806:	d002      	beq.n	800280e <I2C_Slave_STOPF+0x6a>
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	2b2a      	cmp	r3, #42	@ 0x2a
 800280c:	d135      	bne.n	800287a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	b29a      	uxth	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002820:	b29b      	uxth	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d005      	beq.n	8002832 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282a:	f043 0204 	orr.w	r2, r3, #4
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002840:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe fb48 	bl	8000edc <HAL_DMA_GetState>
 800284c:	4603      	mov	r3, r0
 800284e:	2b01      	cmp	r3, #1
 8002850:	d049      	beq.n	80028e6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002856:	4a69      	ldr	r2, [pc, #420]	@ (80029fc <I2C_Slave_STOPF+0x258>)
 8002858:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800285e:	4618      	mov	r0, r3
 8002860:	f7fe fb1a 	bl	8000e98 <HAL_DMA_Abort_IT>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d03d      	beq.n	80028e6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800286e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002874:	4610      	mov	r0, r2
 8002876:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002878:	e035      	b.n	80028e6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	b29a      	uxth	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800288c:	b29b      	uxth	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d005      	beq.n	800289e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	f043 0204 	orr.w	r2, r3, #4
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028ac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fe fb12 	bl	8000edc <HAL_DMA_GetState>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d014      	beq.n	80028e8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028c2:	4a4e      	ldr	r2, [pc, #312]	@ (80029fc <I2C_Slave_STOPF+0x258>)
 80028c4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fe fae4 	bl	8000e98 <HAL_DMA_Abort_IT>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d008      	beq.n	80028e8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80028e0:	4610      	mov	r0, r2
 80028e2:	4798      	blx	r3
 80028e4:	e000      	b.n	80028e8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80028e6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d03e      	beq.n	8002970 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d112      	bne.n	8002926 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691a      	ldr	r2, [r3, #16]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800291c:	b29b      	uxth	r3, r3
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002930:	2b40      	cmp	r3, #64	@ 0x40
 8002932:	d112      	bne.n	800295a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691a      	ldr	r2, [r3, #16]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002950:	b29b      	uxth	r3, r3
 8002952:	3b01      	subs	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295e:	b29b      	uxth	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	d005      	beq.n	8002970 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002968:	f043 0204 	orr.w	r2, r3, #4
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f8b7 	bl	8002aec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800297e:	e039      	b.n	80029f4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002980:	7bfb      	ldrb	r3, [r7, #15]
 8002982:	2b2a      	cmp	r3, #42	@ 0x2a
 8002984:	d109      	bne.n	800299a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2228      	movs	r2, #40	@ 0x28
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff f80c 	bl	80019b2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b28      	cmp	r3, #40	@ 0x28
 80029a4:	d111      	bne.n	80029ca <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a15      	ldr	r2, [pc, #84]	@ (8002a00 <I2C_Slave_STOPF+0x25c>)
 80029aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2220      	movs	r2, #32
 80029b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff f80d 	bl	80019e2 <HAL_I2C_ListenCpltCallback>
}
 80029c8:	e014      	b.n	80029f4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ce:	2b22      	cmp	r3, #34	@ 0x22
 80029d0:	d002      	beq.n	80029d8 <I2C_Slave_STOPF+0x234>
 80029d2:	7bfb      	ldrb	r3, [r7, #15]
 80029d4:	2b22      	cmp	r3, #34	@ 0x22
 80029d6:	d10d      	bne.n	80029f4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7fe ffdf 	bl	80019b2 <HAL_I2C_SlaveRxCpltCallback>
}
 80029f4:	bf00      	nop
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	08002d51 	.word	0x08002d51
 8002a00:	ffff0000 	.word	0xffff0000

08002a04 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a12:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a18:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d002      	beq.n	8002a26 <I2C_Slave_AF+0x22>
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b20      	cmp	r3, #32
 8002a24:	d129      	bne.n	8002a7a <I2C_Slave_AF+0x76>
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
 8002a28:	2b28      	cmp	r3, #40	@ 0x28
 8002a2a:	d126      	bne.n	8002a7a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a2e      	ldr	r2, [pc, #184]	@ (8002ae8 <I2C_Slave_AF+0xe4>)
 8002a30:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002a40:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a4a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a5a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2220      	movs	r2, #32
 8002a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7fe ffb5 	bl	80019e2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002a78:	e031      	b.n	8002ade <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
 8002a7c:	2b21      	cmp	r3, #33	@ 0x21
 8002a7e:	d129      	bne.n	8002ad4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a19      	ldr	r2, [pc, #100]	@ (8002ae8 <I2C_Slave_AF+0xe4>)
 8002a84:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2221      	movs	r2, #33	@ 0x21
 8002a8a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002aaa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ab4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ac4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7fe fd4e 	bl	8001568 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7fe ff66 	bl	800199e <HAL_I2C_SlaveTxCpltCallback>
}
 8002ad2:	e004      	b.n	8002ade <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002adc:	615a      	str	r2, [r3, #20]
}
 8002ade:	bf00      	nop
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	ffff0000 	.word	0xffff0000

08002aec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002afa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b02:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002b04:	7bbb      	ldrb	r3, [r7, #14]
 8002b06:	2b10      	cmp	r3, #16
 8002b08:	d002      	beq.n	8002b10 <I2C_ITError+0x24>
 8002b0a:	7bbb      	ldrb	r3, [r7, #14]
 8002b0c:	2b40      	cmp	r3, #64	@ 0x40
 8002b0e:	d10a      	bne.n	8002b26 <I2C_ITError+0x3a>
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	2b22      	cmp	r3, #34	@ 0x22
 8002b14:	d107      	bne.n	8002b26 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b24:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
 8002b28:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002b2c:	2b28      	cmp	r3, #40	@ 0x28
 8002b2e:	d107      	bne.n	8002b40 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2228      	movs	r2, #40	@ 0x28
 8002b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002b3e:	e015      	b.n	8002b6c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b4e:	d00a      	beq.n	8002b66 <I2C_ITError+0x7a>
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	2b60      	cmp	r3, #96	@ 0x60
 8002b54:	d007      	beq.n	8002b66 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b7a:	d162      	bne.n	8002c42 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b8a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d020      	beq.n	8002bdc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b9e:	4a6a      	ldr	r2, [pc, #424]	@ (8002d48 <I2C_ITError+0x25c>)
 8002ba0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe f976 	bl	8000e98 <HAL_DMA_Abort_IT>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 8089 	beq.w	8002cc6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	4798      	blx	r3
 8002bda:	e074      	b.n	8002cc6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be0:	4a59      	ldr	r2, [pc, #356]	@ (8002d48 <I2C_ITError+0x25c>)
 8002be2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fe f955 	bl	8000e98 <HAL_DMA_Abort_IT>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d068      	beq.n	8002cc6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bfe:	2b40      	cmp	r3, #64	@ 0x40
 8002c00:	d10b      	bne.n	8002c1a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	691a      	ldr	r2, [r3, #16]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0201 	bic.w	r2, r2, #1
 8002c28:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4798      	blx	r3
 8002c40:	e041      	b.n	8002cc6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b60      	cmp	r3, #96	@ 0x60
 8002c4c:	d125      	bne.n	8002c9a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2220      	movs	r2, #32
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c66:	2b40      	cmp	r3, #64	@ 0x40
 8002c68:	d10b      	bne.n	8002c82 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0201 	bic.w	r2, r2, #1
 8002c90:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7fe fecd 	bl	8001a32 <HAL_I2C_AbortCpltCallback>
 8002c98:	e015      	b.n	8002cc6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca4:	2b40      	cmp	r3, #64	@ 0x40
 8002ca6:	d10b      	bne.n	8002cc0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691a      	ldr	r2, [r3, #16]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7fe feac 	bl	8001a1e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cca:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10e      	bne.n	8002cf4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d109      	bne.n	8002cf4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d104      	bne.n	8002cf4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d007      	beq.n	8002d04 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002d02:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d0a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d113      	bne.n	8002d40 <I2C_ITError+0x254>
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
 8002d1a:	2b28      	cmp	r3, #40	@ 0x28
 8002d1c:	d110      	bne.n	8002d40 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a0a      	ldr	r2, [pc, #40]	@ (8002d4c <I2C_ITError+0x260>)
 8002d22:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7fe fe51 	bl	80019e2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d40:	bf00      	nop
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	08002d51 	.word	0x08002d51
 8002d4c:	ffff0000 	.word	0xffff0000

08002d50 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d60:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d68:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d6a:	4b4b      	ldr	r3, [pc, #300]	@ (8002e98 <I2C_DMAAbort+0x148>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	08db      	lsrs	r3, r3, #3
 8002d70:	4a4a      	ldr	r2, [pc, #296]	@ (8002e9c <I2C_DMAAbort+0x14c>)
 8002d72:	fba2 2303 	umull	r2, r3, r2, r3
 8002d76:	0a1a      	lsrs	r2, r3, #8
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	00da      	lsls	r2, r3, #3
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d106      	bne.n	8002d98 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	f043 0220 	orr.w	r2, r3, #32
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8002d96:	e00a      	b.n	8002dae <I2C_DMAAbort+0x5e>
    }
    count--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002da8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dac:	d0ea      	beq.n	8002d84 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dba:	2200      	movs	r2, #0
 8002dbc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dca:	2200      	movs	r2, #0
 8002dcc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ddc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2200      	movs	r2, #0
 8002de2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002df0:	2200      	movs	r2, #0
 8002df2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e00:	2200      	movs	r2, #0
 8002e02:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0201 	bic.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b60      	cmp	r3, #96	@ 0x60
 8002e1e:	d10e      	bne.n	8002e3e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	2200      	movs	r2, #0
 8002e34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e36:	6978      	ldr	r0, [r7, #20]
 8002e38:	f7fe fdfb 	bl	8001a32 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e3c:	e027      	b.n	8002e8e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e3e:	7cfb      	ldrb	r3, [r7, #19]
 8002e40:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002e44:	2b28      	cmp	r3, #40	@ 0x28
 8002e46:	d117      	bne.n	8002e78 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e66:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2228      	movs	r2, #40	@ 0x28
 8002e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002e76:	e007      	b.n	8002e88 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002e88:	6978      	ldr	r0, [r7, #20]
 8002e8a:	f7fe fdc8 	bl	8001a1e <HAL_I2C_ErrorCallback>
}
 8002e8e:	bf00      	nop
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	20000000 	.word	0x20000000
 8002e9c:	14f8b589 	.word	0x14f8b589

08002ea0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002eac:	4b13      	ldr	r3, [pc, #76]	@ (8002efc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	08db      	lsrs	r3, r3, #3
 8002eb2:	4a13      	ldr	r2, [pc, #76]	@ (8002f00 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb8:	0a1a      	lsrs	r2, r3, #8
 8002eba:	4613      	mov	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d107      	bne.n	8002ede <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed2:	f043 0220 	orr.w	r2, r3, #32
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e008      	b.n	8002ef0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002eec:	d0e9      	beq.n	8002ec2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	20000000 	.word	0x20000000
 8002f00:	14f8b589 	.word	0x14f8b589

08002f04 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f10:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002f14:	d103      	bne.n	8002f1e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002f1c:	e007      	b.n	8002f2e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f22:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002f26:	d102      	bne.n	8002f2e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2208      	movs	r2, #8
 8002f2c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e267      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d075      	beq.n	8003046 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f5a:	4b88      	ldr	r3, [pc, #544]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 030c 	and.w	r3, r3, #12
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d00c      	beq.n	8002f80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f66:	4b85      	ldr	r3, [pc, #532]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d112      	bne.n	8002f98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f72:	4b82      	ldr	r3, [pc, #520]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f7e:	d10b      	bne.n	8002f98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f80:	4b7e      	ldr	r3, [pc, #504]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d05b      	beq.n	8003044 <HAL_RCC_OscConfig+0x108>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d157      	bne.n	8003044 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e242      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fa0:	d106      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x74>
 8002fa2:	4b76      	ldr	r3, [pc, #472]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a75      	ldr	r2, [pc, #468]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8002fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	e01d      	b.n	8002fec <HAL_RCC_OscConfig+0xb0>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fb8:	d10c      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x98>
 8002fba:	4b70      	ldr	r3, [pc, #448]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a6f      	ldr	r2, [pc, #444]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8002fc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	4b6d      	ldr	r3, [pc, #436]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a6c      	ldr	r2, [pc, #432]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8002fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	e00b      	b.n	8002fec <HAL_RCC_OscConfig+0xb0>
 8002fd4:	4b69      	ldr	r3, [pc, #420]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a68      	ldr	r2, [pc, #416]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8002fda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fde:	6013      	str	r3, [r2, #0]
 8002fe0:	4b66      	ldr	r3, [pc, #408]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a65      	ldr	r2, [pc, #404]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8002fe6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d013      	beq.n	800301c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff4:	f7fd fe62 	bl	8000cbc <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ffc:	f7fd fe5e 	bl	8000cbc <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b64      	cmp	r3, #100	@ 0x64
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e207      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300e:	4b5b      	ldr	r3, [pc, #364]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0f0      	beq.n	8002ffc <HAL_RCC_OscConfig+0xc0>
 800301a:	e014      	b.n	8003046 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301c:	f7fd fe4e 	bl	8000cbc <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003024:	f7fd fe4a 	bl	8000cbc <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b64      	cmp	r3, #100	@ 0x64
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e1f3      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003036:	4b51      	ldr	r3, [pc, #324]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0xe8>
 8003042:	e000      	b.n	8003046 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d063      	beq.n	800311a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003052:	4b4a      	ldr	r3, [pc, #296]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 030c 	and.w	r3, r3, #12
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00b      	beq.n	8003076 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800305e:	4b47      	ldr	r3, [pc, #284]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003066:	2b08      	cmp	r3, #8
 8003068:	d11c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800306a:	4b44      	ldr	r3, [pc, #272]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d116      	bne.n	80030a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003076:	4b41      	ldr	r3, [pc, #260]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d005      	beq.n	800308e <HAL_RCC_OscConfig+0x152>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d001      	beq.n	800308e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e1c7      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308e:	4b3b      	ldr	r3, [pc, #236]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	4937      	ldr	r1, [pc, #220]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030a2:	e03a      	b.n	800311a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d020      	beq.n	80030ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ac:	4b34      	ldr	r3, [pc, #208]	@ (8003180 <HAL_RCC_OscConfig+0x244>)
 80030ae:	2201      	movs	r2, #1
 80030b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b2:	f7fd fe03 	bl	8000cbc <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ba:	f7fd fdff 	bl	8000cbc <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e1a8      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030cc:	4b2b      	ldr	r3, [pc, #172]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f0      	beq.n	80030ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d8:	4b28      	ldr	r3, [pc, #160]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4925      	ldr	r1, [pc, #148]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	600b      	str	r3, [r1, #0]
 80030ec:	e015      	b.n	800311a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ee:	4b24      	ldr	r3, [pc, #144]	@ (8003180 <HAL_RCC_OscConfig+0x244>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f4:	f7fd fde2 	bl	8000cbc <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030fc:	f7fd fdde 	bl	8000cbc <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e187      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800310e:	4b1b      	ldr	r3, [pc, #108]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d036      	beq.n	8003194 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d016      	beq.n	800315c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800312e:	4b15      	ldr	r3, [pc, #84]	@ (8003184 <HAL_RCC_OscConfig+0x248>)
 8003130:	2201      	movs	r2, #1
 8003132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003134:	f7fd fdc2 	bl	8000cbc <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800313c:	f7fd fdbe 	bl	8000cbc <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e167      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800314e:	4b0b      	ldr	r3, [pc, #44]	@ (800317c <HAL_RCC_OscConfig+0x240>)
 8003150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0x200>
 800315a:	e01b      	b.n	8003194 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800315c:	4b09      	ldr	r3, [pc, #36]	@ (8003184 <HAL_RCC_OscConfig+0x248>)
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003162:	f7fd fdab 	bl	8000cbc <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003168:	e00e      	b.n	8003188 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800316a:	f7fd fda7 	bl	8000cbc <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d907      	bls.n	8003188 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e150      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
 800317c:	40023800 	.word	0x40023800
 8003180:	42470000 	.word	0x42470000
 8003184:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003188:	4b88      	ldr	r3, [pc, #544]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 800318a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1ea      	bne.n	800316a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 8097 	beq.w	80032d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031a2:	2300      	movs	r3, #0
 80031a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031a6:	4b81      	ldr	r3, [pc, #516]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10f      	bne.n	80031d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b2:	2300      	movs	r3, #0
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	4b7d      	ldr	r3, [pc, #500]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ba:	4a7c      	ldr	r2, [pc, #496]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 80031bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80031c2:	4b7a      	ldr	r3, [pc, #488]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ce:	2301      	movs	r3, #1
 80031d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d2:	4b77      	ldr	r3, [pc, #476]	@ (80033b0 <HAL_RCC_OscConfig+0x474>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d118      	bne.n	8003210 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031de:	4b74      	ldr	r3, [pc, #464]	@ (80033b0 <HAL_RCC_OscConfig+0x474>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a73      	ldr	r2, [pc, #460]	@ (80033b0 <HAL_RCC_OscConfig+0x474>)
 80031e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ea:	f7fd fd67 	bl	8000cbc <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f2:	f7fd fd63 	bl	8000cbc <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e10c      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003204:	4b6a      	ldr	r3, [pc, #424]	@ (80033b0 <HAL_RCC_OscConfig+0x474>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0f0      	beq.n	80031f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d106      	bne.n	8003226 <HAL_RCC_OscConfig+0x2ea>
 8003218:	4b64      	ldr	r3, [pc, #400]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 800321a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800321c:	4a63      	ldr	r2, [pc, #396]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	6713      	str	r3, [r2, #112]	@ 0x70
 8003224:	e01c      	b.n	8003260 <HAL_RCC_OscConfig+0x324>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2b05      	cmp	r3, #5
 800322c:	d10c      	bne.n	8003248 <HAL_RCC_OscConfig+0x30c>
 800322e:	4b5f      	ldr	r3, [pc, #380]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 8003230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003232:	4a5e      	ldr	r2, [pc, #376]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 8003234:	f043 0304 	orr.w	r3, r3, #4
 8003238:	6713      	str	r3, [r2, #112]	@ 0x70
 800323a:	4b5c      	ldr	r3, [pc, #368]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 800323c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800323e:	4a5b      	ldr	r2, [pc, #364]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	6713      	str	r3, [r2, #112]	@ 0x70
 8003246:	e00b      	b.n	8003260 <HAL_RCC_OscConfig+0x324>
 8003248:	4b58      	ldr	r3, [pc, #352]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 800324a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800324c:	4a57      	ldr	r2, [pc, #348]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 800324e:	f023 0301 	bic.w	r3, r3, #1
 8003252:	6713      	str	r3, [r2, #112]	@ 0x70
 8003254:	4b55      	ldr	r3, [pc, #340]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 8003256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003258:	4a54      	ldr	r2, [pc, #336]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 800325a:	f023 0304 	bic.w	r3, r3, #4
 800325e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d015      	beq.n	8003294 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003268:	f7fd fd28 	bl	8000cbc <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326e:	e00a      	b.n	8003286 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003270:	f7fd fd24 	bl	8000cbc <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e0cb      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003286:	4b49      	ldr	r3, [pc, #292]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0ee      	beq.n	8003270 <HAL_RCC_OscConfig+0x334>
 8003292:	e014      	b.n	80032be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003294:	f7fd fd12 	bl	8000cbc <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800329a:	e00a      	b.n	80032b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800329c:	f7fd fd0e 	bl	8000cbc <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e0b5      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032b2:	4b3e      	ldr	r3, [pc, #248]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1ee      	bne.n	800329c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032be:	7dfb      	ldrb	r3, [r7, #23]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d105      	bne.n	80032d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c4:	4b39      	ldr	r3, [pc, #228]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	4a38      	ldr	r2, [pc, #224]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 80032ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 80a1 	beq.w	800341c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032da:	4b34      	ldr	r3, [pc, #208]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d05c      	beq.n	80033a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d141      	bne.n	8003372 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ee:	4b31      	ldr	r3, [pc, #196]	@ (80033b4 <HAL_RCC_OscConfig+0x478>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f4:	f7fd fce2 	bl	8000cbc <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fc:	f7fd fcde 	bl	8000cbc <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e087      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330e:	4b27      	ldr	r3, [pc, #156]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69da      	ldr	r2, [r3, #28]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003328:	019b      	lsls	r3, r3, #6
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003330:	085b      	lsrs	r3, r3, #1
 8003332:	3b01      	subs	r3, #1
 8003334:	041b      	lsls	r3, r3, #16
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800333c:	061b      	lsls	r3, r3, #24
 800333e:	491b      	ldr	r1, [pc, #108]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 8003340:	4313      	orrs	r3, r2
 8003342:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003344:	4b1b      	ldr	r3, [pc, #108]	@ (80033b4 <HAL_RCC_OscConfig+0x478>)
 8003346:	2201      	movs	r2, #1
 8003348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334a:	f7fd fcb7 	bl	8000cbc <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003352:	f7fd fcb3 	bl	8000cbc <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e05c      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003364:	4b11      	ldr	r3, [pc, #68]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x416>
 8003370:	e054      	b.n	800341c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003372:	4b10      	ldr	r3, [pc, #64]	@ (80033b4 <HAL_RCC_OscConfig+0x478>)
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003378:	f7fd fca0 	bl	8000cbc <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003380:	f7fd fc9c 	bl	8000cbc <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e045      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003392:	4b06      	ldr	r3, [pc, #24]	@ (80033ac <HAL_RCC_OscConfig+0x470>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f0      	bne.n	8003380 <HAL_RCC_OscConfig+0x444>
 800339e:	e03d      	b.n	800341c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d107      	bne.n	80033b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e038      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40007000 	.word	0x40007000
 80033b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003428 <HAL_RCC_OscConfig+0x4ec>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d028      	beq.n	8003418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d121      	bne.n	8003418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033de:	429a      	cmp	r2, r3
 80033e0:	d11a      	bne.n	8003418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033e8:	4013      	ands	r3, r2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d111      	bne.n	8003418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fe:	085b      	lsrs	r3, r3, #1
 8003400:	3b01      	subs	r3, #1
 8003402:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003404:	429a      	cmp	r2, r3
 8003406:	d107      	bne.n	8003418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003412:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003414:	429a      	cmp	r2, r3
 8003416:	d001      	beq.n	800341c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e000      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40023800 	.word	0x40023800

0800342c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e0cc      	b.n	80035da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003440:	4b68      	ldr	r3, [pc, #416]	@ (80035e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d90c      	bls.n	8003468 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344e:	4b65      	ldr	r3, [pc, #404]	@ (80035e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003456:	4b63      	ldr	r3, [pc, #396]	@ (80035e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d001      	beq.n	8003468 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e0b8      	b.n	80035da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d020      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003480:	4b59      	ldr	r3, [pc, #356]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	4a58      	ldr	r2, [pc, #352]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800348a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0308 	and.w	r3, r3, #8
 8003494:	2b00      	cmp	r3, #0
 8003496:	d005      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003498:	4b53      	ldr	r3, [pc, #332]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	4a52      	ldr	r2, [pc, #328]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80034a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a4:	4b50      	ldr	r3, [pc, #320]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	494d      	ldr	r1, [pc, #308]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d044      	beq.n	800354c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d107      	bne.n	80034da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ca:	4b47      	ldr	r3, [pc, #284]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d119      	bne.n	800350a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e07f      	b.n	80035da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d003      	beq.n	80034ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034e6:	2b03      	cmp	r3, #3
 80034e8:	d107      	bne.n	80034fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ea:	4b3f      	ldr	r3, [pc, #252]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d109      	bne.n	800350a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e06f      	b.n	80035da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034fa:	4b3b      	ldr	r3, [pc, #236]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e067      	b.n	80035da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800350a:	4b37      	ldr	r3, [pc, #220]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f023 0203 	bic.w	r2, r3, #3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	4934      	ldr	r1, [pc, #208]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003518:	4313      	orrs	r3, r2
 800351a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800351c:	f7fd fbce 	bl	8000cbc <HAL_GetTick>
 8003520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003522:	e00a      	b.n	800353a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003524:	f7fd fbca 	bl	8000cbc <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003532:	4293      	cmp	r3, r2
 8003534:	d901      	bls.n	800353a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e04f      	b.n	80035da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353a:	4b2b      	ldr	r3, [pc, #172]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 020c 	and.w	r2, r3, #12
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	429a      	cmp	r2, r3
 800354a:	d1eb      	bne.n	8003524 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800354c:	4b25      	ldr	r3, [pc, #148]	@ (80035e4 <HAL_RCC_ClockConfig+0x1b8>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d20c      	bcs.n	8003574 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355a:	4b22      	ldr	r3, [pc, #136]	@ (80035e4 <HAL_RCC_ClockConfig+0x1b8>)
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003562:	4b20      	ldr	r3, [pc, #128]	@ (80035e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d001      	beq.n	8003574 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e032      	b.n	80035da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003580:	4b19      	ldr	r3, [pc, #100]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	4916      	ldr	r1, [pc, #88]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 800358e:	4313      	orrs	r3, r2
 8003590:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d009      	beq.n	80035b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800359e:	4b12      	ldr	r3, [pc, #72]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	490e      	ldr	r1, [pc, #56]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035b2:	f000 f821 	bl	80035f8 <HAL_RCC_GetSysClockFreq>
 80035b6:	4602      	mov	r2, r0
 80035b8:	4b0b      	ldr	r3, [pc, #44]	@ (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	091b      	lsrs	r3, r3, #4
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	490a      	ldr	r1, [pc, #40]	@ (80035ec <HAL_RCC_ClockConfig+0x1c0>)
 80035c4:	5ccb      	ldrb	r3, [r1, r3]
 80035c6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ca:	4a09      	ldr	r2, [pc, #36]	@ (80035f0 <HAL_RCC_ClockConfig+0x1c4>)
 80035cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035ce:	4b09      	ldr	r3, [pc, #36]	@ (80035f4 <HAL_RCC_ClockConfig+0x1c8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fd fa08 	bl	80009e8 <HAL_InitTick>

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40023c00 	.word	0x40023c00
 80035e8:	40023800 	.word	0x40023800
 80035ec:	08005540 	.word	0x08005540
 80035f0:	20000000 	.word	0x20000000
 80035f4:	20000004 	.word	0x20000004

080035f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035fc:	b094      	sub	sp, #80	@ 0x50
 80035fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	647b      	str	r3, [r7, #68]	@ 0x44
 8003604:	2300      	movs	r3, #0
 8003606:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003608:	2300      	movs	r3, #0
 800360a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003610:	4b79      	ldr	r3, [pc, #484]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 030c 	and.w	r3, r3, #12
 8003618:	2b08      	cmp	r3, #8
 800361a:	d00d      	beq.n	8003638 <HAL_RCC_GetSysClockFreq+0x40>
 800361c:	2b08      	cmp	r3, #8
 800361e:	f200 80e1 	bhi.w	80037e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <HAL_RCC_GetSysClockFreq+0x34>
 8003626:	2b04      	cmp	r3, #4
 8003628:	d003      	beq.n	8003632 <HAL_RCC_GetSysClockFreq+0x3a>
 800362a:	e0db      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800362c:	4b73      	ldr	r3, [pc, #460]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x204>)
 800362e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003630:	e0db      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003632:	4b73      	ldr	r3, [pc, #460]	@ (8003800 <HAL_RCC_GetSysClockFreq+0x208>)
 8003634:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003636:	e0d8      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003638:	4b6f      	ldr	r3, [pc, #444]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003640:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003642:	4b6d      	ldr	r3, [pc, #436]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d063      	beq.n	8003716 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800364e:	4b6a      	ldr	r3, [pc, #424]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	099b      	lsrs	r3, r3, #6
 8003654:	2200      	movs	r2, #0
 8003656:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003658:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800365a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800365c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003660:	633b      	str	r3, [r7, #48]	@ 0x30
 8003662:	2300      	movs	r3, #0
 8003664:	637b      	str	r3, [r7, #52]	@ 0x34
 8003666:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800366a:	4622      	mov	r2, r4
 800366c:	462b      	mov	r3, r5
 800366e:	f04f 0000 	mov.w	r0, #0
 8003672:	f04f 0100 	mov.w	r1, #0
 8003676:	0159      	lsls	r1, r3, #5
 8003678:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800367c:	0150      	lsls	r0, r2, #5
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	4621      	mov	r1, r4
 8003684:	1a51      	subs	r1, r2, r1
 8003686:	6139      	str	r1, [r7, #16]
 8003688:	4629      	mov	r1, r5
 800368a:	eb63 0301 	sbc.w	r3, r3, r1
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800369c:	4659      	mov	r1, fp
 800369e:	018b      	lsls	r3, r1, #6
 80036a0:	4651      	mov	r1, sl
 80036a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036a6:	4651      	mov	r1, sl
 80036a8:	018a      	lsls	r2, r1, #6
 80036aa:	4651      	mov	r1, sl
 80036ac:	ebb2 0801 	subs.w	r8, r2, r1
 80036b0:	4659      	mov	r1, fp
 80036b2:	eb63 0901 	sbc.w	r9, r3, r1
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036ca:	4690      	mov	r8, r2
 80036cc:	4699      	mov	r9, r3
 80036ce:	4623      	mov	r3, r4
 80036d0:	eb18 0303 	adds.w	r3, r8, r3
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	462b      	mov	r3, r5
 80036d8:	eb49 0303 	adc.w	r3, r9, r3
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	f04f 0200 	mov.w	r2, #0
 80036e2:	f04f 0300 	mov.w	r3, #0
 80036e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036ea:	4629      	mov	r1, r5
 80036ec:	024b      	lsls	r3, r1, #9
 80036ee:	4621      	mov	r1, r4
 80036f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036f4:	4621      	mov	r1, r4
 80036f6:	024a      	lsls	r2, r1, #9
 80036f8:	4610      	mov	r0, r2
 80036fa:	4619      	mov	r1, r3
 80036fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036fe:	2200      	movs	r2, #0
 8003700:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003702:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003704:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003708:	f7fc fd62 	bl	80001d0 <__aeabi_uldivmod>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4613      	mov	r3, r2
 8003712:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003714:	e058      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003716:	4b38      	ldr	r3, [pc, #224]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	099b      	lsrs	r3, r3, #6
 800371c:	2200      	movs	r2, #0
 800371e:	4618      	mov	r0, r3
 8003720:	4611      	mov	r1, r2
 8003722:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003726:	623b      	str	r3, [r7, #32]
 8003728:	2300      	movs	r3, #0
 800372a:	627b      	str	r3, [r7, #36]	@ 0x24
 800372c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003730:	4642      	mov	r2, r8
 8003732:	464b      	mov	r3, r9
 8003734:	f04f 0000 	mov.w	r0, #0
 8003738:	f04f 0100 	mov.w	r1, #0
 800373c:	0159      	lsls	r1, r3, #5
 800373e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003742:	0150      	lsls	r0, r2, #5
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4641      	mov	r1, r8
 800374a:	ebb2 0a01 	subs.w	sl, r2, r1
 800374e:	4649      	mov	r1, r9
 8003750:	eb63 0b01 	sbc.w	fp, r3, r1
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003760:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003764:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003768:	ebb2 040a 	subs.w	r4, r2, sl
 800376c:	eb63 050b 	sbc.w	r5, r3, fp
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	f04f 0300 	mov.w	r3, #0
 8003778:	00eb      	lsls	r3, r5, #3
 800377a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800377e:	00e2      	lsls	r2, r4, #3
 8003780:	4614      	mov	r4, r2
 8003782:	461d      	mov	r5, r3
 8003784:	4643      	mov	r3, r8
 8003786:	18e3      	adds	r3, r4, r3
 8003788:	603b      	str	r3, [r7, #0]
 800378a:	464b      	mov	r3, r9
 800378c:	eb45 0303 	adc.w	r3, r5, r3
 8003790:	607b      	str	r3, [r7, #4]
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800379e:	4629      	mov	r1, r5
 80037a0:	028b      	lsls	r3, r1, #10
 80037a2:	4621      	mov	r1, r4
 80037a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037a8:	4621      	mov	r1, r4
 80037aa:	028a      	lsls	r2, r1, #10
 80037ac:	4610      	mov	r0, r2
 80037ae:	4619      	mov	r1, r3
 80037b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037b2:	2200      	movs	r2, #0
 80037b4:	61bb      	str	r3, [r7, #24]
 80037b6:	61fa      	str	r2, [r7, #28]
 80037b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037bc:	f7fc fd08 	bl	80001d0 <__aeabi_uldivmod>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4613      	mov	r3, r2
 80037c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037c8:	4b0b      	ldr	r3, [pc, #44]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	0c1b      	lsrs	r3, r3, #16
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	3301      	adds	r3, #1
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80037d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037e2:	e002      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037e4:	4b05      	ldr	r3, [pc, #20]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x204>)
 80037e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3750      	adds	r7, #80	@ 0x50
 80037f0:	46bd      	mov	sp, r7
 80037f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037f6:	bf00      	nop
 80037f8:	40023800 	.word	0x40023800
 80037fc:	00f42400 	.word	0x00f42400
 8003800:	007a1200 	.word	0x007a1200

08003804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003808:	4b03      	ldr	r3, [pc, #12]	@ (8003818 <HAL_RCC_GetHCLKFreq+0x14>)
 800380a:	681b      	ldr	r3, [r3, #0]
}
 800380c:	4618      	mov	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	20000000 	.word	0x20000000

0800381c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003820:	f7ff fff0 	bl	8003804 <HAL_RCC_GetHCLKFreq>
 8003824:	4602      	mov	r2, r0
 8003826:	4b05      	ldr	r3, [pc, #20]	@ (800383c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	0a9b      	lsrs	r3, r3, #10
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	4903      	ldr	r1, [pc, #12]	@ (8003840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003832:	5ccb      	ldrb	r3, [r1, r3]
 8003834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003838:	4618      	mov	r0, r3
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40023800 	.word	0x40023800
 8003840:	08005550 	.word	0x08005550

08003844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003848:	f7ff ffdc 	bl	8003804 <HAL_RCC_GetHCLKFreq>
 800384c:	4602      	mov	r2, r0
 800384e:	4b05      	ldr	r3, [pc, #20]	@ (8003864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	0b5b      	lsrs	r3, r3, #13
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	4903      	ldr	r1, [pc, #12]	@ (8003868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800385a:	5ccb      	ldrb	r3, [r1, r3]
 800385c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003860:	4618      	mov	r0, r3
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40023800 	.word	0x40023800
 8003868:	08005550 	.word	0x08005550

0800386c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	220f      	movs	r2, #15
 800387a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800387c:	4b12      	ldr	r3, [pc, #72]	@ (80038c8 <HAL_RCC_GetClockConfig+0x5c>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 0203 	and.w	r2, r3, #3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003888:	4b0f      	ldr	r3, [pc, #60]	@ (80038c8 <HAL_RCC_GetClockConfig+0x5c>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003894:	4b0c      	ldr	r3, [pc, #48]	@ (80038c8 <HAL_RCC_GetClockConfig+0x5c>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80038a0:	4b09      	ldr	r3, [pc, #36]	@ (80038c8 <HAL_RCC_GetClockConfig+0x5c>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	08db      	lsrs	r3, r3, #3
 80038a6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80038ae:	4b07      	ldr	r3, [pc, #28]	@ (80038cc <HAL_RCC_GetClockConfig+0x60>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0207 	and.w	r2, r3, #7
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	601a      	str	r2, [r3, #0]
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40023800 	.word	0x40023800
 80038cc:	40023c00 	.word	0x40023c00

080038d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e041      	b.n	8003966 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d106      	bne.n	80038fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f839 	bl	800396e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3304      	adds	r3, #4
 800390c:	4619      	mov	r1, r3
 800390e:	4610      	mov	r0, r2
 8003910:	f000 f9c0 	bl	8003c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
	...

08003984 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b01      	cmp	r3, #1
 8003996:	d001      	beq.n	800399c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e04e      	b.n	8003a3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68da      	ldr	r2, [r3, #12]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0201 	orr.w	r2, r2, #1
 80039b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a23      	ldr	r2, [pc, #140]	@ (8003a48 <HAL_TIM_Base_Start_IT+0xc4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d022      	beq.n	8003a04 <HAL_TIM_Base_Start_IT+0x80>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039c6:	d01d      	beq.n	8003a04 <HAL_TIM_Base_Start_IT+0x80>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a1f      	ldr	r2, [pc, #124]	@ (8003a4c <HAL_TIM_Base_Start_IT+0xc8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d018      	beq.n	8003a04 <HAL_TIM_Base_Start_IT+0x80>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a1e      	ldr	r2, [pc, #120]	@ (8003a50 <HAL_TIM_Base_Start_IT+0xcc>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d013      	beq.n	8003a04 <HAL_TIM_Base_Start_IT+0x80>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003a54 <HAL_TIM_Base_Start_IT+0xd0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d00e      	beq.n	8003a04 <HAL_TIM_Base_Start_IT+0x80>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003a58 <HAL_TIM_Base_Start_IT+0xd4>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d009      	beq.n	8003a04 <HAL_TIM_Base_Start_IT+0x80>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a19      	ldr	r2, [pc, #100]	@ (8003a5c <HAL_TIM_Base_Start_IT+0xd8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d004      	beq.n	8003a04 <HAL_TIM_Base_Start_IT+0x80>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a18      	ldr	r2, [pc, #96]	@ (8003a60 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d111      	bne.n	8003a28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b06      	cmp	r3, #6
 8003a14:	d010      	beq.n	8003a38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f042 0201 	orr.w	r2, r2, #1
 8003a24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a26:	e007      	b.n	8003a38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40010000 	.word	0x40010000
 8003a4c:	40000400 	.word	0x40000400
 8003a50:	40000800 	.word	0x40000800
 8003a54:	40000c00 	.word	0x40000c00
 8003a58:	40010400 	.word	0x40010400
 8003a5c:	40014000 	.word	0x40014000
 8003a60:	40001800 	.word	0x40001800

08003a64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d020      	beq.n	8003ac8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d01b      	beq.n	8003ac8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f06f 0202 	mvn.w	r2, #2
 8003a98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f8d2 	bl	8003c58 <HAL_TIM_IC_CaptureCallback>
 8003ab4:	e005      	b.n	8003ac2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f8c4 	bl	8003c44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f8d5 	bl	8003c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d020      	beq.n	8003b14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d01b      	beq.n	8003b14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f06f 0204 	mvn.w	r2, #4
 8003ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2202      	movs	r2, #2
 8003aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f8ac 	bl	8003c58 <HAL_TIM_IC_CaptureCallback>
 8003b00:	e005      	b.n	8003b0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f89e 	bl	8003c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f8af 	bl	8003c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d020      	beq.n	8003b60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d01b      	beq.n	8003b60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0208 	mvn.w	r2, #8
 8003b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2204      	movs	r2, #4
 8003b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f886 	bl	8003c58 <HAL_TIM_IC_CaptureCallback>
 8003b4c:	e005      	b.n	8003b5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f878 	bl	8003c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f889 	bl	8003c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	f003 0310 	and.w	r3, r3, #16
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d020      	beq.n	8003bac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f003 0310 	and.w	r3, r3, #16
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d01b      	beq.n	8003bac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f06f 0210 	mvn.w	r2, #16
 8003b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2208      	movs	r2, #8
 8003b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f860 	bl	8003c58 <HAL_TIM_IC_CaptureCallback>
 8003b98:	e005      	b.n	8003ba6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f852 	bl	8003c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f863 	bl	8003c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00c      	beq.n	8003bd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d007      	beq.n	8003bd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f06f 0201 	mvn.w	r2, #1
 8003bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fc fe70 	bl	80008b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00c      	beq.n	8003bf4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d007      	beq.n	8003bf4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f906 	bl	8003e00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00c      	beq.n	8003c18 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d007      	beq.n	8003c18 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f834 	bl	8003c80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f003 0320 	and.w	r3, r3, #32
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00c      	beq.n	8003c3c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f003 0320 	and.w	r3, r3, #32
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d007      	beq.n	8003c3c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0220 	mvn.w	r2, #32
 8003c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f8d8 	bl	8003dec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c3c:	bf00      	nop
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a46      	ldr	r2, [pc, #280]	@ (8003dc0 <TIM_Base_SetConfig+0x12c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d013      	beq.n	8003cd4 <TIM_Base_SetConfig+0x40>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cb2:	d00f      	beq.n	8003cd4 <TIM_Base_SetConfig+0x40>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a43      	ldr	r2, [pc, #268]	@ (8003dc4 <TIM_Base_SetConfig+0x130>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d00b      	beq.n	8003cd4 <TIM_Base_SetConfig+0x40>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a42      	ldr	r2, [pc, #264]	@ (8003dc8 <TIM_Base_SetConfig+0x134>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d007      	beq.n	8003cd4 <TIM_Base_SetConfig+0x40>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a41      	ldr	r2, [pc, #260]	@ (8003dcc <TIM_Base_SetConfig+0x138>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d003      	beq.n	8003cd4 <TIM_Base_SetConfig+0x40>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a40      	ldr	r2, [pc, #256]	@ (8003dd0 <TIM_Base_SetConfig+0x13c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d108      	bne.n	8003ce6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a35      	ldr	r2, [pc, #212]	@ (8003dc0 <TIM_Base_SetConfig+0x12c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d02b      	beq.n	8003d46 <TIM_Base_SetConfig+0xb2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cf4:	d027      	beq.n	8003d46 <TIM_Base_SetConfig+0xb2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a32      	ldr	r2, [pc, #200]	@ (8003dc4 <TIM_Base_SetConfig+0x130>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d023      	beq.n	8003d46 <TIM_Base_SetConfig+0xb2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a31      	ldr	r2, [pc, #196]	@ (8003dc8 <TIM_Base_SetConfig+0x134>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d01f      	beq.n	8003d46 <TIM_Base_SetConfig+0xb2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a30      	ldr	r2, [pc, #192]	@ (8003dcc <TIM_Base_SetConfig+0x138>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d01b      	beq.n	8003d46 <TIM_Base_SetConfig+0xb2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a2f      	ldr	r2, [pc, #188]	@ (8003dd0 <TIM_Base_SetConfig+0x13c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d017      	beq.n	8003d46 <TIM_Base_SetConfig+0xb2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a2e      	ldr	r2, [pc, #184]	@ (8003dd4 <TIM_Base_SetConfig+0x140>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d013      	beq.n	8003d46 <TIM_Base_SetConfig+0xb2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a2d      	ldr	r2, [pc, #180]	@ (8003dd8 <TIM_Base_SetConfig+0x144>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00f      	beq.n	8003d46 <TIM_Base_SetConfig+0xb2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a2c      	ldr	r2, [pc, #176]	@ (8003ddc <TIM_Base_SetConfig+0x148>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d00b      	beq.n	8003d46 <TIM_Base_SetConfig+0xb2>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a2b      	ldr	r2, [pc, #172]	@ (8003de0 <TIM_Base_SetConfig+0x14c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d007      	beq.n	8003d46 <TIM_Base_SetConfig+0xb2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a2a      	ldr	r2, [pc, #168]	@ (8003de4 <TIM_Base_SetConfig+0x150>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d003      	beq.n	8003d46 <TIM_Base_SetConfig+0xb2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a29      	ldr	r2, [pc, #164]	@ (8003de8 <TIM_Base_SetConfig+0x154>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d108      	bne.n	8003d58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a10      	ldr	r2, [pc, #64]	@ (8003dc0 <TIM_Base_SetConfig+0x12c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d003      	beq.n	8003d8c <TIM_Base_SetConfig+0xf8>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a12      	ldr	r2, [pc, #72]	@ (8003dd0 <TIM_Base_SetConfig+0x13c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d103      	bne.n	8003d94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	691a      	ldr	r2, [r3, #16]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d105      	bne.n	8003db2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f023 0201 	bic.w	r2, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	611a      	str	r2, [r3, #16]
  }
}
 8003db2:	bf00      	nop
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40010000 	.word	0x40010000
 8003dc4:	40000400 	.word	0x40000400
 8003dc8:	40000800 	.word	0x40000800
 8003dcc:	40000c00 	.word	0x40000c00
 8003dd0:	40010400 	.word	0x40010400
 8003dd4:	40014000 	.word	0x40014000
 8003dd8:	40014400 	.word	0x40014400
 8003ddc:	40014800 	.word	0x40014800
 8003de0:	40001800 	.word	0x40001800
 8003de4:	40001c00 	.word	0x40001c00
 8003de8:	40002000 	.word	0x40002000

08003dec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003e22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e26:	2b84      	cmp	r3, #132	@ 0x84
 8003e28:	d005      	beq.n	8003e36 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003e2a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4413      	add	r3, r2
 8003e32:	3303      	adds	r3, #3
 8003e34:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003e36:	68fb      	ldr	r3, [r7, #12]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3714      	adds	r7, #20
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003e48:	f000 fafc 	bl	8004444 <vTaskStartScheduler>
  
  return osOK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003e52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e54:	b089      	sub	sp, #36	@ 0x24
 8003e56:	af04      	add	r7, sp, #16
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d020      	beq.n	8003ea6 <osThreadCreate+0x54>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d01c      	beq.n	8003ea6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685c      	ldr	r4, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691e      	ldr	r6, [r3, #16]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff ffc8 	bl	8003e14 <makeFreeRtosPriority>
 8003e84:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e8e:	9202      	str	r2, [sp, #8]
 8003e90:	9301      	str	r3, [sp, #4]
 8003e92:	9100      	str	r1, [sp, #0]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	4632      	mov	r2, r6
 8003e98:	4629      	mov	r1, r5
 8003e9a:	4620      	mov	r0, r4
 8003e9c:	f000 f8ed 	bl	800407a <xTaskCreateStatic>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	e01c      	b.n	8003ee0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685c      	ldr	r4, [r3, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003eb2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff ffaa 	bl	8003e14 <makeFreeRtosPriority>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	f107 030c 	add.w	r3, r7, #12
 8003ec6:	9301      	str	r3, [sp, #4]
 8003ec8:	9200      	str	r2, [sp, #0]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	4632      	mov	r2, r6
 8003ece:	4629      	mov	r1, r5
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	f000 f932 	bl	800413a <xTaskCreate>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d001      	beq.n	8003ee0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	e000      	b.n	8003ee2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003eea <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b084      	sub	sp, #16
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <osDelay+0x16>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	e000      	b.n	8003f02 <osDelay+0x18>
 8003f00:	2301      	movs	r3, #1
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fa68 	bl	80043d8 <vTaskDelay>
  
  return osOK;
 8003f08:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f103 0208 	add.w	r2, r3, #8
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f2a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f103 0208 	add.w	r2, r3, #8
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f103 0208 	add.w	r2, r3, #8
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	689a      	ldr	r2, [r3, #8]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	601a      	str	r2, [r3, #0]
}
 8003fa8:	bf00      	nop
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fca:	d103      	bne.n	8003fd4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	e00c      	b.n	8003fee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3308      	adds	r3, #8
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	e002      	b.n	8003fe2 <vListInsert+0x2e>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d2f6      	bcs.n	8003fdc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	1c5a      	adds	r2, r3, #1
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	601a      	str	r2, [r3, #0]
}
 800401a:	bf00      	nop
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004026:	b480      	push	{r7}
 8004028:	b085      	sub	sp, #20
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6892      	ldr	r2, [r2, #8]
 800403c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6852      	ldr	r2, [r2, #4]
 8004046:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	429a      	cmp	r2, r3
 8004050:	d103      	bne.n	800405a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	1e5a      	subs	r2, r3, #1
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800407a:	b580      	push	{r7, lr}
 800407c:	b08e      	sub	sp, #56	@ 0x38
 800407e:	af04      	add	r7, sp, #16
 8004080:	60f8      	str	r0, [r7, #12]
 8004082:	60b9      	str	r1, [r7, #8]
 8004084:	607a      	str	r2, [r7, #4]
 8004086:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10b      	bne.n	80040a6 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800408e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004092:	f383 8811 	msr	BASEPRI, r3
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80040a0:	bf00      	nop
 80040a2:	bf00      	nop
 80040a4:	e7fd      	b.n	80040a2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80040a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10b      	bne.n	80040c4 <xTaskCreateStatic+0x4a>
	__asm volatile
 80040ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	61fb      	str	r3, [r7, #28]
}
 80040be:	bf00      	nop
 80040c0:	bf00      	nop
 80040c2:	e7fd      	b.n	80040c0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80040c4:	23a0      	movs	r3, #160	@ 0xa0
 80040c6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80040cc:	d00b      	beq.n	80040e6 <xTaskCreateStatic+0x6c>
	__asm volatile
 80040ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	61bb      	str	r3, [r7, #24]
}
 80040e0:	bf00      	nop
 80040e2:	bf00      	nop
 80040e4:	e7fd      	b.n	80040e2 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80040e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80040e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d01e      	beq.n	800412c <xTaskCreateStatic+0xb2>
 80040ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d01b      	beq.n	800412c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80040f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040fc:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80040fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004100:	2202      	movs	r2, #2
 8004102:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004106:	2300      	movs	r3, #0
 8004108:	9303      	str	r3, [sp, #12]
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410c:	9302      	str	r3, [sp, #8]
 800410e:	f107 0314 	add.w	r3, r7, #20
 8004112:	9301      	str	r3, [sp, #4]
 8004114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	68b9      	ldr	r1, [r7, #8]
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 f850 	bl	80041c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004124:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004126:	f000 f8ed 	bl	8004304 <prvAddNewTaskToReadyList>
 800412a:	e001      	b.n	8004130 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800412c:	2300      	movs	r3, #0
 800412e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004130:	697b      	ldr	r3, [r7, #20]
	}
 8004132:	4618      	mov	r0, r3
 8004134:	3728      	adds	r7, #40	@ 0x28
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800413a:	b580      	push	{r7, lr}
 800413c:	b08c      	sub	sp, #48	@ 0x30
 800413e:	af04      	add	r7, sp, #16
 8004140:	60f8      	str	r0, [r7, #12]
 8004142:	60b9      	str	r1, [r7, #8]
 8004144:	603b      	str	r3, [r7, #0]
 8004146:	4613      	mov	r3, r2
 8004148:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800414a:	88fb      	ldrh	r3, [r7, #6]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4618      	mov	r0, r3
 8004150:	f000 ff02 	bl	8004f58 <pvPortMalloc>
 8004154:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00e      	beq.n	800417a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800415c:	20a0      	movs	r0, #160	@ 0xa0
 800415e:	f000 fefb 	bl	8004f58 <pvPortMalloc>
 8004162:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004170:	e005      	b.n	800417e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004172:	6978      	ldr	r0, [r7, #20]
 8004174:	f000 ffbe 	bl	80050f4 <vPortFree>
 8004178:	e001      	b.n	800417e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800417a:	2300      	movs	r3, #0
 800417c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d017      	beq.n	80041b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800418c:	88fa      	ldrh	r2, [r7, #6]
 800418e:	2300      	movs	r3, #0
 8004190:	9303      	str	r3, [sp, #12]
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	9302      	str	r3, [sp, #8]
 8004196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004198:	9301      	str	r3, [sp, #4]
 800419a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68b9      	ldr	r1, [r7, #8]
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 f80e 	bl	80041c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041a8:	69f8      	ldr	r0, [r7, #28]
 80041aa:	f000 f8ab 	bl	8004304 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041ae:	2301      	movs	r3, #1
 80041b0:	61bb      	str	r3, [r7, #24]
 80041b2:	e002      	b.n	80041ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80041b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041ba:	69bb      	ldr	r3, [r7, #24]
	}
 80041bc:	4618      	mov	r0, r3
 80041be:	3720      	adds	r7, #32
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b088      	sub	sp, #32
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
 80041d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80041d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041dc:	3b01      	subs	r3, #1
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	f023 0307 	bic.w	r3, r3, #7
 80041ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00b      	beq.n	800420e <prvInitialiseNewTask+0x4a>
	__asm volatile
 80041f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041fa:	f383 8811 	msr	BASEPRI, r3
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	f3bf 8f4f 	dsb	sy
 8004206:	617b      	str	r3, [r7, #20]
}
 8004208:	bf00      	nop
 800420a:	bf00      	nop
 800420c:	e7fd      	b.n	800420a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d01f      	beq.n	8004254 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004214:	2300      	movs	r3, #0
 8004216:	61fb      	str	r3, [r7, #28]
 8004218:	e012      	b.n	8004240 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	4413      	add	r3, r2
 8004220:	7819      	ldrb	r1, [r3, #0]
 8004222:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	4413      	add	r3, r2
 8004228:	3334      	adds	r3, #52	@ 0x34
 800422a:	460a      	mov	r2, r1
 800422c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	4413      	add	r3, r2
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d006      	beq.n	8004248 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	3301      	adds	r3, #1
 800423e:	61fb      	str	r3, [r7, #28]
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	2b0f      	cmp	r3, #15
 8004244:	d9e9      	bls.n	800421a <prvInitialiseNewTask+0x56>
 8004246:	e000      	b.n	800424a <prvInitialiseNewTask+0x86>
			{
				break;
 8004248:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800424a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004252:	e003      	b.n	800425c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800425c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800425e:	2b06      	cmp	r3, #6
 8004260:	d901      	bls.n	8004266 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004262:	2306      	movs	r3, #6
 8004264:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004268:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800426a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800426c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004270:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004274:	2200      	movs	r2, #0
 8004276:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427a:	3304      	adds	r3, #4
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff fe68 	bl	8003f52 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004284:	3318      	adds	r3, #24
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff fe63 	bl	8003f52 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800428c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004290:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004294:	f1c3 0207 	rsb	r2, r3, #7
 8004298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800429c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042a0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a4:	2200      	movs	r2, #0
 80042a6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80042b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b4:	334c      	adds	r3, #76	@ 0x4c
 80042b6:	224c      	movs	r2, #76	@ 0x4c
 80042b8:	2100      	movs	r1, #0
 80042ba:	4618      	mov	r0, r3
 80042bc:	f001 f83a 	bl	8005334 <memset>
 80042c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c2:	4a0d      	ldr	r2, [pc, #52]	@ (80042f8 <prvInitialiseNewTask+0x134>)
 80042c4:	651a      	str	r2, [r3, #80]	@ 0x50
 80042c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c8:	4a0c      	ldr	r2, [pc, #48]	@ (80042fc <prvInitialiseNewTask+0x138>)
 80042ca:	655a      	str	r2, [r3, #84]	@ 0x54
 80042cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ce:	4a0c      	ldr	r2, [pc, #48]	@ (8004300 <prvInitialiseNewTask+0x13c>)
 80042d0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	68f9      	ldr	r1, [r7, #12]
 80042d6:	69b8      	ldr	r0, [r7, #24]
 80042d8:	f000 fc2a 	bl	8004b30 <pxPortInitialiseStack>
 80042dc:	4602      	mov	r2, r0
 80042de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80042e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042ee:	bf00      	nop
 80042f0:	3720      	adds	r7, #32
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20004120 	.word	0x20004120
 80042fc:	20004188 	.word	0x20004188
 8004300:	200041f0 	.word	0x200041f0

08004304 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800430c:	f000 fd44 	bl	8004d98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004310:	4b2a      	ldr	r3, [pc, #168]	@ (80043bc <prvAddNewTaskToReadyList+0xb8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3301      	adds	r3, #1
 8004316:	4a29      	ldr	r2, [pc, #164]	@ (80043bc <prvAddNewTaskToReadyList+0xb8>)
 8004318:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800431a:	4b29      	ldr	r3, [pc, #164]	@ (80043c0 <prvAddNewTaskToReadyList+0xbc>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d109      	bne.n	8004336 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004322:	4a27      	ldr	r2, [pc, #156]	@ (80043c0 <prvAddNewTaskToReadyList+0xbc>)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004328:	4b24      	ldr	r3, [pc, #144]	@ (80043bc <prvAddNewTaskToReadyList+0xb8>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d110      	bne.n	8004352 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004330:	f000 fad4 	bl	80048dc <prvInitialiseTaskLists>
 8004334:	e00d      	b.n	8004352 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004336:	4b23      	ldr	r3, [pc, #140]	@ (80043c4 <prvAddNewTaskToReadyList+0xc0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d109      	bne.n	8004352 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800433e:	4b20      	ldr	r3, [pc, #128]	@ (80043c0 <prvAddNewTaskToReadyList+0xbc>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004348:	429a      	cmp	r2, r3
 800434a:	d802      	bhi.n	8004352 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800434c:	4a1c      	ldr	r2, [pc, #112]	@ (80043c0 <prvAddNewTaskToReadyList+0xbc>)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004352:	4b1d      	ldr	r3, [pc, #116]	@ (80043c8 <prvAddNewTaskToReadyList+0xc4>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3301      	adds	r3, #1
 8004358:	4a1b      	ldr	r2, [pc, #108]	@ (80043c8 <prvAddNewTaskToReadyList+0xc4>)
 800435a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004360:	2201      	movs	r2, #1
 8004362:	409a      	lsls	r2, r3
 8004364:	4b19      	ldr	r3, [pc, #100]	@ (80043cc <prvAddNewTaskToReadyList+0xc8>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4313      	orrs	r3, r2
 800436a:	4a18      	ldr	r2, [pc, #96]	@ (80043cc <prvAddNewTaskToReadyList+0xc8>)
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004372:	4613      	mov	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4a15      	ldr	r2, [pc, #84]	@ (80043d0 <prvAddNewTaskToReadyList+0xcc>)
 800437c:	441a      	add	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3304      	adds	r3, #4
 8004382:	4619      	mov	r1, r3
 8004384:	4610      	mov	r0, r2
 8004386:	f7ff fdf1 	bl	8003f6c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800438a:	f000 fd37 	bl	8004dfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800438e:	4b0d      	ldr	r3, [pc, #52]	@ (80043c4 <prvAddNewTaskToReadyList+0xc0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00e      	beq.n	80043b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004396:	4b0a      	ldr	r3, [pc, #40]	@ (80043c0 <prvAddNewTaskToReadyList+0xbc>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d207      	bcs.n	80043b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043a4:	4b0b      	ldr	r3, [pc, #44]	@ (80043d4 <prvAddNewTaskToReadyList+0xd0>)
 80043a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043b4:	bf00      	nop
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	200004cc 	.word	0x200004cc
 80043c0:	200003cc 	.word	0x200003cc
 80043c4:	200004d8 	.word	0x200004d8
 80043c8:	200004e8 	.word	0x200004e8
 80043cc:	200004d4 	.word	0x200004d4
 80043d0:	200003d0 	.word	0x200003d0
 80043d4:	e000ed04 	.word	0xe000ed04

080043d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80043e0:	2300      	movs	r3, #0
 80043e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d018      	beq.n	800441c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80043ea:	4b14      	ldr	r3, [pc, #80]	@ (800443c <vTaskDelay+0x64>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00b      	beq.n	800440a <vTaskDelay+0x32>
	__asm volatile
 80043f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	60bb      	str	r3, [r7, #8]
}
 8004404:	bf00      	nop
 8004406:	bf00      	nop
 8004408:	e7fd      	b.n	8004406 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800440a:	f000 f885 	bl	8004518 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800440e:	2100      	movs	r1, #0
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 fb27 	bl	8004a64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004416:	f000 f88d 	bl	8004534 <xTaskResumeAll>
 800441a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d107      	bne.n	8004432 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004422:	4b07      	ldr	r3, [pc, #28]	@ (8004440 <vTaskDelay+0x68>)
 8004424:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004432:	bf00      	nop
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	200004f4 	.word	0x200004f4
 8004440:	e000ed04 	.word	0xe000ed04

08004444 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b08a      	sub	sp, #40	@ 0x28
 8004448:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800444a:	2300      	movs	r3, #0
 800444c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800444e:	2300      	movs	r3, #0
 8004450:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004452:	463a      	mov	r2, r7
 8004454:	1d39      	adds	r1, r7, #4
 8004456:	f107 0308 	add.w	r3, r7, #8
 800445a:	4618      	mov	r0, r3
 800445c:	f7fc f830 	bl	80004c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004460:	6839      	ldr	r1, [r7, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	9202      	str	r2, [sp, #8]
 8004468:	9301      	str	r3, [sp, #4]
 800446a:	2300      	movs	r3, #0
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	2300      	movs	r3, #0
 8004470:	460a      	mov	r2, r1
 8004472:	4921      	ldr	r1, [pc, #132]	@ (80044f8 <vTaskStartScheduler+0xb4>)
 8004474:	4821      	ldr	r0, [pc, #132]	@ (80044fc <vTaskStartScheduler+0xb8>)
 8004476:	f7ff fe00 	bl	800407a <xTaskCreateStatic>
 800447a:	4603      	mov	r3, r0
 800447c:	4a20      	ldr	r2, [pc, #128]	@ (8004500 <vTaskStartScheduler+0xbc>)
 800447e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004480:	4b1f      	ldr	r3, [pc, #124]	@ (8004500 <vTaskStartScheduler+0xbc>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004488:	2301      	movs	r3, #1
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	e001      	b.n	8004492 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d11b      	bne.n	80044d0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	613b      	str	r3, [r7, #16]
}
 80044aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80044ac:	4b15      	ldr	r3, [pc, #84]	@ (8004504 <vTaskStartScheduler+0xc0>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	334c      	adds	r3, #76	@ 0x4c
 80044b2:	4a15      	ldr	r2, [pc, #84]	@ (8004508 <vTaskStartScheduler+0xc4>)
 80044b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044b6:	4b15      	ldr	r3, [pc, #84]	@ (800450c <vTaskStartScheduler+0xc8>)
 80044b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80044bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80044be:	4b14      	ldr	r3, [pc, #80]	@ (8004510 <vTaskStartScheduler+0xcc>)
 80044c0:	2201      	movs	r2, #1
 80044c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80044c4:	4b13      	ldr	r3, [pc, #76]	@ (8004514 <vTaskStartScheduler+0xd0>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80044ca:	f000 fbc1 	bl	8004c50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80044ce:	e00f      	b.n	80044f0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044d6:	d10b      	bne.n	80044f0 <vTaskStartScheduler+0xac>
	__asm volatile
 80044d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	60fb      	str	r3, [r7, #12]
}
 80044ea:	bf00      	nop
 80044ec:	bf00      	nop
 80044ee:	e7fd      	b.n	80044ec <vTaskStartScheduler+0xa8>
}
 80044f0:	bf00      	nop
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	08005538 	.word	0x08005538
 80044fc:	080048ad 	.word	0x080048ad
 8004500:	200004f0 	.word	0x200004f0
 8004504:	200003cc 	.word	0x200003cc
 8004508:	20000010 	.word	0x20000010
 800450c:	200004ec 	.word	0x200004ec
 8004510:	200004d8 	.word	0x200004d8
 8004514:	200004d0 	.word	0x200004d0

08004518 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800451c:	4b04      	ldr	r3, [pc, #16]	@ (8004530 <vTaskSuspendAll+0x18>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3301      	adds	r3, #1
 8004522:	4a03      	ldr	r2, [pc, #12]	@ (8004530 <vTaskSuspendAll+0x18>)
 8004524:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004526:	bf00      	nop
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	200004f4 	.word	0x200004f4

08004534 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800453e:	2300      	movs	r3, #0
 8004540:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004542:	4b42      	ldr	r3, [pc, #264]	@ (800464c <xTaskResumeAll+0x118>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10b      	bne.n	8004562 <xTaskResumeAll+0x2e>
	__asm volatile
 800454a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800454e:	f383 8811 	msr	BASEPRI, r3
 8004552:	f3bf 8f6f 	isb	sy
 8004556:	f3bf 8f4f 	dsb	sy
 800455a:	603b      	str	r3, [r7, #0]
}
 800455c:	bf00      	nop
 800455e:	bf00      	nop
 8004560:	e7fd      	b.n	800455e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004562:	f000 fc19 	bl	8004d98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004566:	4b39      	ldr	r3, [pc, #228]	@ (800464c <xTaskResumeAll+0x118>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	3b01      	subs	r3, #1
 800456c:	4a37      	ldr	r2, [pc, #220]	@ (800464c <xTaskResumeAll+0x118>)
 800456e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004570:	4b36      	ldr	r3, [pc, #216]	@ (800464c <xTaskResumeAll+0x118>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d161      	bne.n	800463c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004578:	4b35      	ldr	r3, [pc, #212]	@ (8004650 <xTaskResumeAll+0x11c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d05d      	beq.n	800463c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004580:	e02e      	b.n	80045e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004582:	4b34      	ldr	r3, [pc, #208]	@ (8004654 <xTaskResumeAll+0x120>)
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	3318      	adds	r3, #24
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff fd49 	bl	8004026 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	3304      	adds	r3, #4
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff fd44 	bl	8004026 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a2:	2201      	movs	r2, #1
 80045a4:	409a      	lsls	r2, r3
 80045a6:	4b2c      	ldr	r3, [pc, #176]	@ (8004658 <xTaskResumeAll+0x124>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	4a2a      	ldr	r2, [pc, #168]	@ (8004658 <xTaskResumeAll+0x124>)
 80045ae:	6013      	str	r3, [r2, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045b4:	4613      	mov	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4a27      	ldr	r2, [pc, #156]	@ (800465c <xTaskResumeAll+0x128>)
 80045be:	441a      	add	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	3304      	adds	r3, #4
 80045c4:	4619      	mov	r1, r3
 80045c6:	4610      	mov	r0, r2
 80045c8:	f7ff fcd0 	bl	8003f6c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045d0:	4b23      	ldr	r3, [pc, #140]	@ (8004660 <xTaskResumeAll+0x12c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d302      	bcc.n	80045e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80045da:	4b22      	ldr	r3, [pc, #136]	@ (8004664 <xTaskResumeAll+0x130>)
 80045dc:	2201      	movs	r2, #1
 80045de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045e0:	4b1c      	ldr	r3, [pc, #112]	@ (8004654 <xTaskResumeAll+0x120>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1cc      	bne.n	8004582 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80045ee:	f000 fa19 	bl	8004a24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80045f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004668 <xTaskResumeAll+0x134>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d010      	beq.n	8004620 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045fe:	f000 f837 	bl	8004670 <xTaskIncrementTick>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004608:	4b16      	ldr	r3, [pc, #88]	@ (8004664 <xTaskResumeAll+0x130>)
 800460a:	2201      	movs	r2, #1
 800460c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3b01      	subs	r3, #1
 8004612:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f1      	bne.n	80045fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800461a:	4b13      	ldr	r3, [pc, #76]	@ (8004668 <xTaskResumeAll+0x134>)
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004620:	4b10      	ldr	r3, [pc, #64]	@ (8004664 <xTaskResumeAll+0x130>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d009      	beq.n	800463c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004628:	2301      	movs	r3, #1
 800462a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800462c:	4b0f      	ldr	r3, [pc, #60]	@ (800466c <xTaskResumeAll+0x138>)
 800462e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800463c:	f000 fbde 	bl	8004dfc <vPortExitCritical>

	return xAlreadyYielded;
 8004640:	68bb      	ldr	r3, [r7, #8]
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	200004f4 	.word	0x200004f4
 8004650:	200004cc 	.word	0x200004cc
 8004654:	2000048c 	.word	0x2000048c
 8004658:	200004d4 	.word	0x200004d4
 800465c:	200003d0 	.word	0x200003d0
 8004660:	200003cc 	.word	0x200003cc
 8004664:	200004e0 	.word	0x200004e0
 8004668:	200004dc 	.word	0x200004dc
 800466c:	e000ed04 	.word	0xe000ed04

08004670 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800467a:	4b4f      	ldr	r3, [pc, #316]	@ (80047b8 <xTaskIncrementTick+0x148>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	f040 808f 	bne.w	80047a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004684:	4b4d      	ldr	r3, [pc, #308]	@ (80047bc <xTaskIncrementTick+0x14c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3301      	adds	r3, #1
 800468a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800468c:	4a4b      	ldr	r2, [pc, #300]	@ (80047bc <xTaskIncrementTick+0x14c>)
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d121      	bne.n	80046dc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004698:	4b49      	ldr	r3, [pc, #292]	@ (80047c0 <xTaskIncrementTick+0x150>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00b      	beq.n	80046ba <xTaskIncrementTick+0x4a>
	__asm volatile
 80046a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	603b      	str	r3, [r7, #0]
}
 80046b4:	bf00      	nop
 80046b6:	bf00      	nop
 80046b8:	e7fd      	b.n	80046b6 <xTaskIncrementTick+0x46>
 80046ba:	4b41      	ldr	r3, [pc, #260]	@ (80047c0 <xTaskIncrementTick+0x150>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	4b40      	ldr	r3, [pc, #256]	@ (80047c4 <xTaskIncrementTick+0x154>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a3e      	ldr	r2, [pc, #248]	@ (80047c0 <xTaskIncrementTick+0x150>)
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	4a3e      	ldr	r2, [pc, #248]	@ (80047c4 <xTaskIncrementTick+0x154>)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	4b3e      	ldr	r3, [pc, #248]	@ (80047c8 <xTaskIncrementTick+0x158>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3301      	adds	r3, #1
 80046d4:	4a3c      	ldr	r2, [pc, #240]	@ (80047c8 <xTaskIncrementTick+0x158>)
 80046d6:	6013      	str	r3, [r2, #0]
 80046d8:	f000 f9a4 	bl	8004a24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046dc:	4b3b      	ldr	r3, [pc, #236]	@ (80047cc <xTaskIncrementTick+0x15c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d348      	bcc.n	8004778 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046e6:	4b36      	ldr	r3, [pc, #216]	@ (80047c0 <xTaskIncrementTick+0x150>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d104      	bne.n	80046fa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046f0:	4b36      	ldr	r3, [pc, #216]	@ (80047cc <xTaskIncrementTick+0x15c>)
 80046f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80046f6:	601a      	str	r2, [r3, #0]
					break;
 80046f8:	e03e      	b.n	8004778 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046fa:	4b31      	ldr	r3, [pc, #196]	@ (80047c0 <xTaskIncrementTick+0x150>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	429a      	cmp	r2, r3
 8004710:	d203      	bcs.n	800471a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004712:	4a2e      	ldr	r2, [pc, #184]	@ (80047cc <xTaskIncrementTick+0x15c>)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004718:	e02e      	b.n	8004778 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	3304      	adds	r3, #4
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff fc81 	bl	8004026 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004728:	2b00      	cmp	r3, #0
 800472a:	d004      	beq.n	8004736 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	3318      	adds	r3, #24
 8004730:	4618      	mov	r0, r3
 8004732:	f7ff fc78 	bl	8004026 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473a:	2201      	movs	r2, #1
 800473c:	409a      	lsls	r2, r3
 800473e:	4b24      	ldr	r3, [pc, #144]	@ (80047d0 <xTaskIncrementTick+0x160>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4313      	orrs	r3, r2
 8004744:	4a22      	ldr	r2, [pc, #136]	@ (80047d0 <xTaskIncrementTick+0x160>)
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800474c:	4613      	mov	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4a1f      	ldr	r2, [pc, #124]	@ (80047d4 <xTaskIncrementTick+0x164>)
 8004756:	441a      	add	r2, r3
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	3304      	adds	r3, #4
 800475c:	4619      	mov	r1, r3
 800475e:	4610      	mov	r0, r2
 8004760:	f7ff fc04 	bl	8003f6c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004768:	4b1b      	ldr	r3, [pc, #108]	@ (80047d8 <xTaskIncrementTick+0x168>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476e:	429a      	cmp	r2, r3
 8004770:	d3b9      	bcc.n	80046e6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004772:	2301      	movs	r3, #1
 8004774:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004776:	e7b6      	b.n	80046e6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004778:	4b17      	ldr	r3, [pc, #92]	@ (80047d8 <xTaskIncrementTick+0x168>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800477e:	4915      	ldr	r1, [pc, #84]	@ (80047d4 <xTaskIncrementTick+0x164>)
 8004780:	4613      	mov	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d901      	bls.n	8004794 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004790:	2301      	movs	r3, #1
 8004792:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004794:	4b11      	ldr	r3, [pc, #68]	@ (80047dc <xTaskIncrementTick+0x16c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d007      	beq.n	80047ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800479c:	2301      	movs	r3, #1
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	e004      	b.n	80047ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80047a2:	4b0f      	ldr	r3, [pc, #60]	@ (80047e0 <xTaskIncrementTick+0x170>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3301      	adds	r3, #1
 80047a8:	4a0d      	ldr	r2, [pc, #52]	@ (80047e0 <xTaskIncrementTick+0x170>)
 80047aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80047ac:	697b      	ldr	r3, [r7, #20]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3718      	adds	r7, #24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	200004f4 	.word	0x200004f4
 80047bc:	200004d0 	.word	0x200004d0
 80047c0:	20000484 	.word	0x20000484
 80047c4:	20000488 	.word	0x20000488
 80047c8:	200004e4 	.word	0x200004e4
 80047cc:	200004ec 	.word	0x200004ec
 80047d0:	200004d4 	.word	0x200004d4
 80047d4:	200003d0 	.word	0x200003d0
 80047d8:	200003cc 	.word	0x200003cc
 80047dc:	200004e0 	.word	0x200004e0
 80047e0:	200004dc 	.word	0x200004dc

080047e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047ea:	4b2a      	ldr	r3, [pc, #168]	@ (8004894 <vTaskSwitchContext+0xb0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047f2:	4b29      	ldr	r3, [pc, #164]	@ (8004898 <vTaskSwitchContext+0xb4>)
 80047f4:	2201      	movs	r2, #1
 80047f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047f8:	e045      	b.n	8004886 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80047fa:	4b27      	ldr	r3, [pc, #156]	@ (8004898 <vTaskSwitchContext+0xb4>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004800:	4b26      	ldr	r3, [pc, #152]	@ (800489c <vTaskSwitchContext+0xb8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	fab3 f383 	clz	r3, r3
 800480c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800480e:	7afb      	ldrb	r3, [r7, #11]
 8004810:	f1c3 031f 	rsb	r3, r3, #31
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	4922      	ldr	r1, [pc, #136]	@ (80048a0 <vTaskSwitchContext+0xbc>)
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	4613      	mov	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4413      	add	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	440b      	add	r3, r1
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10b      	bne.n	8004842 <vTaskSwitchContext+0x5e>
	__asm volatile
 800482a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482e:	f383 8811 	msr	BASEPRI, r3
 8004832:	f3bf 8f6f 	isb	sy
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	607b      	str	r3, [r7, #4]
}
 800483c:	bf00      	nop
 800483e:	bf00      	nop
 8004840:	e7fd      	b.n	800483e <vTaskSwitchContext+0x5a>
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4613      	mov	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4a14      	ldr	r2, [pc, #80]	@ (80048a0 <vTaskSwitchContext+0xbc>)
 800484e:	4413      	add	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	605a      	str	r2, [r3, #4]
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	3308      	adds	r3, #8
 8004864:	429a      	cmp	r2, r3
 8004866:	d104      	bne.n	8004872 <vTaskSwitchContext+0x8e>
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	605a      	str	r2, [r3, #4]
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	4a0a      	ldr	r2, [pc, #40]	@ (80048a4 <vTaskSwitchContext+0xc0>)
 800487a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800487c:	4b09      	ldr	r3, [pc, #36]	@ (80048a4 <vTaskSwitchContext+0xc0>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	334c      	adds	r3, #76	@ 0x4c
 8004882:	4a09      	ldr	r2, [pc, #36]	@ (80048a8 <vTaskSwitchContext+0xc4>)
 8004884:	6013      	str	r3, [r2, #0]
}
 8004886:	bf00      	nop
 8004888:	371c      	adds	r7, #28
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	200004f4 	.word	0x200004f4
 8004898:	200004e0 	.word	0x200004e0
 800489c:	200004d4 	.word	0x200004d4
 80048a0:	200003d0 	.word	0x200003d0
 80048a4:	200003cc 	.word	0x200003cc
 80048a8:	20000010 	.word	0x20000010

080048ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048b4:	f000 f852 	bl	800495c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80048b8:	4b06      	ldr	r3, [pc, #24]	@ (80048d4 <prvIdleTask+0x28>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d9f9      	bls.n	80048b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80048c0:	4b05      	ldr	r3, [pc, #20]	@ (80048d8 <prvIdleTask+0x2c>)
 80048c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80048d0:	e7f0      	b.n	80048b4 <prvIdleTask+0x8>
 80048d2:	bf00      	nop
 80048d4:	200003d0 	.word	0x200003d0
 80048d8:	e000ed04 	.word	0xe000ed04

080048dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048e2:	2300      	movs	r3, #0
 80048e4:	607b      	str	r3, [r7, #4]
 80048e6:	e00c      	b.n	8004902 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	4613      	mov	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4a12      	ldr	r2, [pc, #72]	@ (800493c <prvInitialiseTaskLists+0x60>)
 80048f4:	4413      	add	r3, r2
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff fb0b 	bl	8003f12 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3301      	adds	r3, #1
 8004900:	607b      	str	r3, [r7, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b06      	cmp	r3, #6
 8004906:	d9ef      	bls.n	80048e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004908:	480d      	ldr	r0, [pc, #52]	@ (8004940 <prvInitialiseTaskLists+0x64>)
 800490a:	f7ff fb02 	bl	8003f12 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800490e:	480d      	ldr	r0, [pc, #52]	@ (8004944 <prvInitialiseTaskLists+0x68>)
 8004910:	f7ff faff 	bl	8003f12 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004914:	480c      	ldr	r0, [pc, #48]	@ (8004948 <prvInitialiseTaskLists+0x6c>)
 8004916:	f7ff fafc 	bl	8003f12 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800491a:	480c      	ldr	r0, [pc, #48]	@ (800494c <prvInitialiseTaskLists+0x70>)
 800491c:	f7ff faf9 	bl	8003f12 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004920:	480b      	ldr	r0, [pc, #44]	@ (8004950 <prvInitialiseTaskLists+0x74>)
 8004922:	f7ff faf6 	bl	8003f12 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004926:	4b0b      	ldr	r3, [pc, #44]	@ (8004954 <prvInitialiseTaskLists+0x78>)
 8004928:	4a05      	ldr	r2, [pc, #20]	@ (8004940 <prvInitialiseTaskLists+0x64>)
 800492a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800492c:	4b0a      	ldr	r3, [pc, #40]	@ (8004958 <prvInitialiseTaskLists+0x7c>)
 800492e:	4a05      	ldr	r2, [pc, #20]	@ (8004944 <prvInitialiseTaskLists+0x68>)
 8004930:	601a      	str	r2, [r3, #0]
}
 8004932:	bf00      	nop
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	200003d0 	.word	0x200003d0
 8004940:	2000045c 	.word	0x2000045c
 8004944:	20000470 	.word	0x20000470
 8004948:	2000048c 	.word	0x2000048c
 800494c:	200004a0 	.word	0x200004a0
 8004950:	200004b8 	.word	0x200004b8
 8004954:	20000484 	.word	0x20000484
 8004958:	20000488 	.word	0x20000488

0800495c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004962:	e019      	b.n	8004998 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004964:	f000 fa18 	bl	8004d98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004968:	4b10      	ldr	r3, [pc, #64]	@ (80049ac <prvCheckTasksWaitingTermination+0x50>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3304      	adds	r3, #4
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff fb56 	bl	8004026 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800497a:	4b0d      	ldr	r3, [pc, #52]	@ (80049b0 <prvCheckTasksWaitingTermination+0x54>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3b01      	subs	r3, #1
 8004980:	4a0b      	ldr	r2, [pc, #44]	@ (80049b0 <prvCheckTasksWaitingTermination+0x54>)
 8004982:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004984:	4b0b      	ldr	r3, [pc, #44]	@ (80049b4 <prvCheckTasksWaitingTermination+0x58>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3b01      	subs	r3, #1
 800498a:	4a0a      	ldr	r2, [pc, #40]	@ (80049b4 <prvCheckTasksWaitingTermination+0x58>)
 800498c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800498e:	f000 fa35 	bl	8004dfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f810 	bl	80049b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004998:	4b06      	ldr	r3, [pc, #24]	@ (80049b4 <prvCheckTasksWaitingTermination+0x58>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1e1      	bne.n	8004964 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049a0:	bf00      	nop
 80049a2:	bf00      	nop
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	200004a0 	.word	0x200004a0
 80049b0:	200004cc 	.word	0x200004cc
 80049b4:	200004b4 	.word	0x200004b4

080049b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	334c      	adds	r3, #76	@ 0x4c
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 fcbd 	bl	8005344 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d108      	bne.n	80049e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 fb8b 	bl	80050f4 <vPortFree>
				vPortFree( pxTCB );
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 fb88 	bl	80050f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049e4:	e019      	b.n	8004a1a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d103      	bne.n	80049f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 fb7f 	bl	80050f4 <vPortFree>
	}
 80049f6:	e010      	b.n	8004a1a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d00b      	beq.n	8004a1a <prvDeleteTCB+0x62>
	__asm volatile
 8004a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a06:	f383 8811 	msr	BASEPRI, r3
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	60fb      	str	r3, [r7, #12]
}
 8004a14:	bf00      	nop
 8004a16:	bf00      	nop
 8004a18:	e7fd      	b.n	8004a16 <prvDeleteTCB+0x5e>
	}
 8004a1a:	bf00      	nop
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a5c <prvResetNextTaskUnblockTime+0x38>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d104      	bne.n	8004a3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a34:	4b0a      	ldr	r3, [pc, #40]	@ (8004a60 <prvResetNextTaskUnblockTime+0x3c>)
 8004a36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a3c:	e008      	b.n	8004a50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a3e:	4b07      	ldr	r3, [pc, #28]	@ (8004a5c <prvResetNextTaskUnblockTime+0x38>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	4a04      	ldr	r2, [pc, #16]	@ (8004a60 <prvResetNextTaskUnblockTime+0x3c>)
 8004a4e:	6013      	str	r3, [r2, #0]
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	20000484 	.word	0x20000484
 8004a60:	200004ec 	.word	0x200004ec

08004a64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a6e:	4b29      	ldr	r3, [pc, #164]	@ (8004b14 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a74:	4b28      	ldr	r3, [pc, #160]	@ (8004b18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	3304      	adds	r3, #4
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7ff fad3 	bl	8004026 <uxListRemove>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10b      	bne.n	8004a9e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004a86:	4b24      	ldr	r3, [pc, #144]	@ (8004b18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a92:	43da      	mvns	r2, r3
 8004a94:	4b21      	ldr	r3, [pc, #132]	@ (8004b1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	4a20      	ldr	r2, [pc, #128]	@ (8004b1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a9c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004aa4:	d10a      	bne.n	8004abc <prvAddCurrentTaskToDelayedList+0x58>
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d007      	beq.n	8004abc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004aac:	4b1a      	ldr	r3, [pc, #104]	@ (8004b18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	481a      	ldr	r0, [pc, #104]	@ (8004b20 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004ab6:	f7ff fa59 	bl	8003f6c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004aba:	e026      	b.n	8004b0a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ac4:	4b14      	ldr	r3, [pc, #80]	@ (8004b18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d209      	bcs.n	8004ae8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ad4:	4b13      	ldr	r3, [pc, #76]	@ (8004b24 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8004b18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	3304      	adds	r3, #4
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	f7ff fa67 	bl	8003fb4 <vListInsert>
}
 8004ae6:	e010      	b.n	8004b0a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8004b28 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	4b0a      	ldr	r3, [pc, #40]	@ (8004b18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3304      	adds	r3, #4
 8004af2:	4619      	mov	r1, r3
 8004af4:	4610      	mov	r0, r2
 8004af6:	f7ff fa5d 	bl	8003fb4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004afa:	4b0c      	ldr	r3, [pc, #48]	@ (8004b2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d202      	bcs.n	8004b0a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004b04:	4a09      	ldr	r2, [pc, #36]	@ (8004b2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	6013      	str	r3, [r2, #0]
}
 8004b0a:	bf00      	nop
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	200004d0 	.word	0x200004d0
 8004b18:	200003cc 	.word	0x200003cc
 8004b1c:	200004d4 	.word	0x200004d4
 8004b20:	200004b8 	.word	0x200004b8
 8004b24:	20000488 	.word	0x20000488
 8004b28:	20000484 	.word	0x20000484
 8004b2c:	200004ec 	.word	0x200004ec

08004b30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	3b04      	subs	r3, #4
 8004b40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	3b04      	subs	r3, #4
 8004b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f023 0201 	bic.w	r2, r3, #1
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	3b04      	subs	r3, #4
 8004b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b60:	4a0c      	ldr	r2, [pc, #48]	@ (8004b94 <pxPortInitialiseStack+0x64>)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	3b14      	subs	r3, #20
 8004b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	3b04      	subs	r3, #4
 8004b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f06f 0202 	mvn.w	r2, #2
 8004b7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	3b20      	subs	r3, #32
 8004b84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b86:	68fb      	ldr	r3, [r7, #12]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	08004b99 	.word	0x08004b99

08004b98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ba2:	4b13      	ldr	r3, [pc, #76]	@ (8004bf0 <prvTaskExitError+0x58>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004baa:	d00b      	beq.n	8004bc4 <prvTaskExitError+0x2c>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	60fb      	str	r3, [r7, #12]
}
 8004bbe:	bf00      	nop
 8004bc0:	bf00      	nop
 8004bc2:	e7fd      	b.n	8004bc0 <prvTaskExitError+0x28>
	__asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	60bb      	str	r3, [r7, #8]
}
 8004bd6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004bd8:	bf00      	nop
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0fc      	beq.n	8004bda <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004be0:	bf00      	nop
 8004be2:	bf00      	nop
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	2000000c 	.word	0x2000000c
	...

08004c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c00:	4b07      	ldr	r3, [pc, #28]	@ (8004c20 <pxCurrentTCBConst2>)
 8004c02:	6819      	ldr	r1, [r3, #0]
 8004c04:	6808      	ldr	r0, [r1, #0]
 8004c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c0a:	f380 8809 	msr	PSP, r0
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f04f 0000 	mov.w	r0, #0
 8004c16:	f380 8811 	msr	BASEPRI, r0
 8004c1a:	4770      	bx	lr
 8004c1c:	f3af 8000 	nop.w

08004c20 <pxCurrentTCBConst2>:
 8004c20:	200003cc 	.word	0x200003cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop

08004c28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c28:	4808      	ldr	r0, [pc, #32]	@ (8004c4c <prvPortStartFirstTask+0x24>)
 8004c2a:	6800      	ldr	r0, [r0, #0]
 8004c2c:	6800      	ldr	r0, [r0, #0]
 8004c2e:	f380 8808 	msr	MSP, r0
 8004c32:	f04f 0000 	mov.w	r0, #0
 8004c36:	f380 8814 	msr	CONTROL, r0
 8004c3a:	b662      	cpsie	i
 8004c3c:	b661      	cpsie	f
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	df00      	svc	0
 8004c48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c4a:	bf00      	nop
 8004c4c:	e000ed08 	.word	0xe000ed08

08004c50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c56:	4b47      	ldr	r3, [pc, #284]	@ (8004d74 <xPortStartScheduler+0x124>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a47      	ldr	r2, [pc, #284]	@ (8004d78 <xPortStartScheduler+0x128>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d10b      	bne.n	8004c78 <xPortStartScheduler+0x28>
	__asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	613b      	str	r3, [r7, #16]
}
 8004c72:	bf00      	nop
 8004c74:	bf00      	nop
 8004c76:	e7fd      	b.n	8004c74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c78:	4b3e      	ldr	r3, [pc, #248]	@ (8004d74 <xPortStartScheduler+0x124>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a3f      	ldr	r2, [pc, #252]	@ (8004d7c <xPortStartScheduler+0x12c>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d10b      	bne.n	8004c9a <xPortStartScheduler+0x4a>
	__asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	60fb      	str	r3, [r7, #12]
}
 8004c94:	bf00      	nop
 8004c96:	bf00      	nop
 8004c98:	e7fd      	b.n	8004c96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c9a:	4b39      	ldr	r3, [pc, #228]	@ (8004d80 <xPortStartScheduler+0x130>)
 8004c9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	22ff      	movs	r2, #255	@ 0xff
 8004caa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cb4:	78fb      	ldrb	r3, [r7, #3]
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	4b31      	ldr	r3, [pc, #196]	@ (8004d84 <xPortStartScheduler+0x134>)
 8004cc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004cc2:	4b31      	ldr	r3, [pc, #196]	@ (8004d88 <xPortStartScheduler+0x138>)
 8004cc4:	2207      	movs	r2, #7
 8004cc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cc8:	e009      	b.n	8004cde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004cca:	4b2f      	ldr	r3, [pc, #188]	@ (8004d88 <xPortStartScheduler+0x138>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	4a2d      	ldr	r2, [pc, #180]	@ (8004d88 <xPortStartScheduler+0x138>)
 8004cd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004cd4:	78fb      	ldrb	r3, [r7, #3]
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cde:	78fb      	ldrb	r3, [r7, #3]
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ce6:	2b80      	cmp	r3, #128	@ 0x80
 8004ce8:	d0ef      	beq.n	8004cca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004cea:	4b27      	ldr	r3, [pc, #156]	@ (8004d88 <xPortStartScheduler+0x138>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f1c3 0307 	rsb	r3, r3, #7
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d00b      	beq.n	8004d0e <xPortStartScheduler+0xbe>
	__asm volatile
 8004cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cfa:	f383 8811 	msr	BASEPRI, r3
 8004cfe:	f3bf 8f6f 	isb	sy
 8004d02:	f3bf 8f4f 	dsb	sy
 8004d06:	60bb      	str	r3, [r7, #8]
}
 8004d08:	bf00      	nop
 8004d0a:	bf00      	nop
 8004d0c:	e7fd      	b.n	8004d0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8004d88 <xPortStartScheduler+0x138>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	021b      	lsls	r3, r3, #8
 8004d14:	4a1c      	ldr	r2, [pc, #112]	@ (8004d88 <xPortStartScheduler+0x138>)
 8004d16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d18:	4b1b      	ldr	r3, [pc, #108]	@ (8004d88 <xPortStartScheduler+0x138>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d20:	4a19      	ldr	r2, [pc, #100]	@ (8004d88 <xPortStartScheduler+0x138>)
 8004d22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d2c:	4b17      	ldr	r3, [pc, #92]	@ (8004d8c <xPortStartScheduler+0x13c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a16      	ldr	r2, [pc, #88]	@ (8004d8c <xPortStartScheduler+0x13c>)
 8004d32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d38:	4b14      	ldr	r3, [pc, #80]	@ (8004d8c <xPortStartScheduler+0x13c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a13      	ldr	r2, [pc, #76]	@ (8004d8c <xPortStartScheduler+0x13c>)
 8004d3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004d42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d44:	f000 f8da 	bl	8004efc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d48:	4b11      	ldr	r3, [pc, #68]	@ (8004d90 <xPortStartScheduler+0x140>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d4e:	f000 f8f9 	bl	8004f44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d52:	4b10      	ldr	r3, [pc, #64]	@ (8004d94 <xPortStartScheduler+0x144>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a0f      	ldr	r2, [pc, #60]	@ (8004d94 <xPortStartScheduler+0x144>)
 8004d58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004d5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d5e:	f7ff ff63 	bl	8004c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d62:	f7ff fd3f 	bl	80047e4 <vTaskSwitchContext>
	prvTaskExitError();
 8004d66:	f7ff ff17 	bl	8004b98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	e000ed00 	.word	0xe000ed00
 8004d78:	410fc271 	.word	0x410fc271
 8004d7c:	410fc270 	.word	0x410fc270
 8004d80:	e000e400 	.word	0xe000e400
 8004d84:	200004f8 	.word	0x200004f8
 8004d88:	200004fc 	.word	0x200004fc
 8004d8c:	e000ed20 	.word	0xe000ed20
 8004d90:	2000000c 	.word	0x2000000c
 8004d94:	e000ef34 	.word	0xe000ef34

08004d98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	607b      	str	r3, [r7, #4]
}
 8004db0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004db2:	4b10      	ldr	r3, [pc, #64]	@ (8004df4 <vPortEnterCritical+0x5c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3301      	adds	r3, #1
 8004db8:	4a0e      	ldr	r2, [pc, #56]	@ (8004df4 <vPortEnterCritical+0x5c>)
 8004dba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8004df4 <vPortEnterCritical+0x5c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d110      	bne.n	8004de6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8004df8 <vPortEnterCritical+0x60>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00b      	beq.n	8004de6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	603b      	str	r3, [r7, #0]
}
 8004de0:	bf00      	nop
 8004de2:	bf00      	nop
 8004de4:	e7fd      	b.n	8004de2 <vPortEnterCritical+0x4a>
	}
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	2000000c 	.word	0x2000000c
 8004df8:	e000ed04 	.word	0xe000ed04

08004dfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e02:	4b12      	ldr	r3, [pc, #72]	@ (8004e4c <vPortExitCritical+0x50>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10b      	bne.n	8004e22 <vPortExitCritical+0x26>
	__asm volatile
 8004e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e0e:	f383 8811 	msr	BASEPRI, r3
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	607b      	str	r3, [r7, #4]
}
 8004e1c:	bf00      	nop
 8004e1e:	bf00      	nop
 8004e20:	e7fd      	b.n	8004e1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e22:	4b0a      	ldr	r3, [pc, #40]	@ (8004e4c <vPortExitCritical+0x50>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	4a08      	ldr	r2, [pc, #32]	@ (8004e4c <vPortExitCritical+0x50>)
 8004e2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e2c:	4b07      	ldr	r3, [pc, #28]	@ (8004e4c <vPortExitCritical+0x50>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d105      	bne.n	8004e40 <vPortExitCritical+0x44>
 8004e34:	2300      	movs	r3, #0
 8004e36:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	2000000c 	.word	0x2000000c

08004e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e50:	f3ef 8009 	mrs	r0, PSP
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	4b15      	ldr	r3, [pc, #84]	@ (8004eb0 <pxCurrentTCBConst>)
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	f01e 0f10 	tst.w	lr, #16
 8004e60:	bf08      	it	eq
 8004e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e6a:	6010      	str	r0, [r2, #0]
 8004e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004e74:	f380 8811 	msr	BASEPRI, r0
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f7ff fcb0 	bl	80047e4 <vTaskSwitchContext>
 8004e84:	f04f 0000 	mov.w	r0, #0
 8004e88:	f380 8811 	msr	BASEPRI, r0
 8004e8c:	bc09      	pop	{r0, r3}
 8004e8e:	6819      	ldr	r1, [r3, #0]
 8004e90:	6808      	ldr	r0, [r1, #0]
 8004e92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e96:	f01e 0f10 	tst.w	lr, #16
 8004e9a:	bf08      	it	eq
 8004e9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ea0:	f380 8809 	msr	PSP, r0
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	f3af 8000 	nop.w

08004eb0 <pxCurrentTCBConst>:
 8004eb0:	200003cc 	.word	0x200003cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004eb4:	bf00      	nop
 8004eb6:	bf00      	nop

08004eb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	607b      	str	r3, [r7, #4]
}
 8004ed0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ed2:	f7ff fbcd 	bl	8004670 <xTaskIncrementTick>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004edc:	4b06      	ldr	r3, [pc, #24]	@ (8004ef8 <SysTick_Handler+0x40>)
 8004ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	f383 8811 	msr	BASEPRI, r3
}
 8004eee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ef0:	bf00      	nop
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	e000ed04 	.word	0xe000ed04

08004efc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f00:	4b0b      	ldr	r3, [pc, #44]	@ (8004f30 <vPortSetupTimerInterrupt+0x34>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f06:	4b0b      	ldr	r3, [pc, #44]	@ (8004f34 <vPortSetupTimerInterrupt+0x38>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f38 <vPortSetupTimerInterrupt+0x3c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a0a      	ldr	r2, [pc, #40]	@ (8004f3c <vPortSetupTimerInterrupt+0x40>)
 8004f12:	fba2 2303 	umull	r2, r3, r2, r3
 8004f16:	099b      	lsrs	r3, r3, #6
 8004f18:	4a09      	ldr	r2, [pc, #36]	@ (8004f40 <vPortSetupTimerInterrupt+0x44>)
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f1e:	4b04      	ldr	r3, [pc, #16]	@ (8004f30 <vPortSetupTimerInterrupt+0x34>)
 8004f20:	2207      	movs	r2, #7
 8004f22:	601a      	str	r2, [r3, #0]
}
 8004f24:	bf00      	nop
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	e000e010 	.word	0xe000e010
 8004f34:	e000e018 	.word	0xe000e018
 8004f38:	20000000 	.word	0x20000000
 8004f3c:	10624dd3 	.word	0x10624dd3
 8004f40:	e000e014 	.word	0xe000e014

08004f44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004f54 <vPortEnableVFP+0x10>
 8004f48:	6801      	ldr	r1, [r0, #0]
 8004f4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004f4e:	6001      	str	r1, [r0, #0]
 8004f50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f52:	bf00      	nop
 8004f54:	e000ed88 	.word	0xe000ed88

08004f58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b08a      	sub	sp, #40	@ 0x28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f60:	2300      	movs	r3, #0
 8004f62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f64:	f7ff fad8 	bl	8004518 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f68:	4b5c      	ldr	r3, [pc, #368]	@ (80050dc <pvPortMalloc+0x184>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f70:	f000 f924 	bl	80051bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f74:	4b5a      	ldr	r3, [pc, #360]	@ (80050e0 <pvPortMalloc+0x188>)
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f040 8095 	bne.w	80050ac <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01e      	beq.n	8004fc6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004f88:	2208      	movs	r2, #8
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d015      	beq.n	8004fc6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f023 0307 	bic.w	r3, r3, #7
 8004fa0:	3308      	adds	r3, #8
 8004fa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f003 0307 	and.w	r3, r3, #7
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00b      	beq.n	8004fc6 <pvPortMalloc+0x6e>
	__asm volatile
 8004fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	617b      	str	r3, [r7, #20]
}
 8004fc0:	bf00      	nop
 8004fc2:	bf00      	nop
 8004fc4:	e7fd      	b.n	8004fc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d06f      	beq.n	80050ac <pvPortMalloc+0x154>
 8004fcc:	4b45      	ldr	r3, [pc, #276]	@ (80050e4 <pvPortMalloc+0x18c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d86a      	bhi.n	80050ac <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004fd6:	4b44      	ldr	r3, [pc, #272]	@ (80050e8 <pvPortMalloc+0x190>)
 8004fd8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004fda:	4b43      	ldr	r3, [pc, #268]	@ (80050e8 <pvPortMalloc+0x190>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fe0:	e004      	b.n	8004fec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d903      	bls.n	8004ffe <pvPortMalloc+0xa6>
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1f1      	bne.n	8004fe2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ffe:	4b37      	ldr	r3, [pc, #220]	@ (80050dc <pvPortMalloc+0x184>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005004:	429a      	cmp	r2, r3
 8005006:	d051      	beq.n	80050ac <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005008:	6a3b      	ldr	r3, [r7, #32]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2208      	movs	r2, #8
 800500e:	4413      	add	r3, r2
 8005010:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800501a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	1ad2      	subs	r2, r2, r3
 8005022:	2308      	movs	r3, #8
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	429a      	cmp	r2, r3
 8005028:	d920      	bls.n	800506c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800502a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4413      	add	r3, r2
 8005030:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00b      	beq.n	8005054 <pvPortMalloc+0xfc>
	__asm volatile
 800503c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	613b      	str	r3, [r7, #16]
}
 800504e:	bf00      	nop
 8005050:	bf00      	nop
 8005052:	e7fd      	b.n	8005050 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	1ad2      	subs	r2, r2, r3
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005066:	69b8      	ldr	r0, [r7, #24]
 8005068:	f000 f90a 	bl	8005280 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800506c:	4b1d      	ldr	r3, [pc, #116]	@ (80050e4 <pvPortMalloc+0x18c>)
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	4a1b      	ldr	r2, [pc, #108]	@ (80050e4 <pvPortMalloc+0x18c>)
 8005078:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800507a:	4b1a      	ldr	r3, [pc, #104]	@ (80050e4 <pvPortMalloc+0x18c>)
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4b1b      	ldr	r3, [pc, #108]	@ (80050ec <pvPortMalloc+0x194>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d203      	bcs.n	800508e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005086:	4b17      	ldr	r3, [pc, #92]	@ (80050e4 <pvPortMalloc+0x18c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a18      	ldr	r2, [pc, #96]	@ (80050ec <pvPortMalloc+0x194>)
 800508c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800508e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	4b13      	ldr	r3, [pc, #76]	@ (80050e0 <pvPortMalloc+0x188>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	431a      	orrs	r2, r3
 8005098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800509c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509e:	2200      	movs	r2, #0
 80050a0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80050a2:	4b13      	ldr	r3, [pc, #76]	@ (80050f0 <pvPortMalloc+0x198>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3301      	adds	r3, #1
 80050a8:	4a11      	ldr	r2, [pc, #68]	@ (80050f0 <pvPortMalloc+0x198>)
 80050aa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80050ac:	f7ff fa42 	bl	8004534 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00b      	beq.n	80050d2 <pvPortMalloc+0x17a>
	__asm volatile
 80050ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	60fb      	str	r3, [r7, #12]
}
 80050cc:	bf00      	nop
 80050ce:	bf00      	nop
 80050d0:	e7fd      	b.n	80050ce <pvPortMalloc+0x176>
	return pvReturn;
 80050d2:	69fb      	ldr	r3, [r7, #28]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3728      	adds	r7, #40	@ 0x28
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	20004108 	.word	0x20004108
 80050e0:	2000411c 	.word	0x2000411c
 80050e4:	2000410c 	.word	0x2000410c
 80050e8:	20004100 	.word	0x20004100
 80050ec:	20004110 	.word	0x20004110
 80050f0:	20004114 	.word	0x20004114

080050f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d04f      	beq.n	80051a6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005106:	2308      	movs	r3, #8
 8005108:	425b      	negs	r3, r3
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	4413      	add	r3, r2
 800510e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	4b25      	ldr	r3, [pc, #148]	@ (80051b0 <vPortFree+0xbc>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4013      	ands	r3, r2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10b      	bne.n	800513a <vPortFree+0x46>
	__asm volatile
 8005122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	60fb      	str	r3, [r7, #12]
}
 8005134:	bf00      	nop
 8005136:	bf00      	nop
 8005138:	e7fd      	b.n	8005136 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00b      	beq.n	800515a <vPortFree+0x66>
	__asm volatile
 8005142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	60bb      	str	r3, [r7, #8]
}
 8005154:	bf00      	nop
 8005156:	bf00      	nop
 8005158:	e7fd      	b.n	8005156 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	4b14      	ldr	r3, [pc, #80]	@ (80051b0 <vPortFree+0xbc>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4013      	ands	r3, r2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d01e      	beq.n	80051a6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d11a      	bne.n	80051a6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	4b0e      	ldr	r3, [pc, #56]	@ (80051b0 <vPortFree+0xbc>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	43db      	mvns	r3, r3
 800517a:	401a      	ands	r2, r3
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005180:	f7ff f9ca 	bl	8004518 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	4b0a      	ldr	r3, [pc, #40]	@ (80051b4 <vPortFree+0xc0>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4413      	add	r3, r2
 800518e:	4a09      	ldr	r2, [pc, #36]	@ (80051b4 <vPortFree+0xc0>)
 8005190:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005192:	6938      	ldr	r0, [r7, #16]
 8005194:	f000 f874 	bl	8005280 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005198:	4b07      	ldr	r3, [pc, #28]	@ (80051b8 <vPortFree+0xc4>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3301      	adds	r3, #1
 800519e:	4a06      	ldr	r2, [pc, #24]	@ (80051b8 <vPortFree+0xc4>)
 80051a0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80051a2:	f7ff f9c7 	bl	8004534 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80051a6:	bf00      	nop
 80051a8:	3718      	adds	r7, #24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	2000411c 	.word	0x2000411c
 80051b4:	2000410c 	.word	0x2000410c
 80051b8:	20004118 	.word	0x20004118

080051bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051c2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80051c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80051c8:	4b27      	ldr	r3, [pc, #156]	@ (8005268 <prvHeapInit+0xac>)
 80051ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f003 0307 	and.w	r3, r3, #7
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00c      	beq.n	80051f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	3307      	adds	r3, #7
 80051da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f023 0307 	bic.w	r3, r3, #7
 80051e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	4a1f      	ldr	r2, [pc, #124]	@ (8005268 <prvHeapInit+0xac>)
 80051ec:	4413      	add	r3, r2
 80051ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051f4:	4a1d      	ldr	r2, [pc, #116]	@ (800526c <prvHeapInit+0xb0>)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80051fa:	4b1c      	ldr	r3, [pc, #112]	@ (800526c <prvHeapInit+0xb0>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	4413      	add	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005208:	2208      	movs	r2, #8
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	1a9b      	subs	r3, r3, r2
 800520e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 0307 	bic.w	r3, r3, #7
 8005216:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4a15      	ldr	r2, [pc, #84]	@ (8005270 <prvHeapInit+0xb4>)
 800521c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800521e:	4b14      	ldr	r3, [pc, #80]	@ (8005270 <prvHeapInit+0xb4>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2200      	movs	r2, #0
 8005224:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005226:	4b12      	ldr	r3, [pc, #72]	@ (8005270 <prvHeapInit+0xb4>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2200      	movs	r2, #0
 800522c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	1ad2      	subs	r2, r2, r3
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800523c:	4b0c      	ldr	r3, [pc, #48]	@ (8005270 <prvHeapInit+0xb4>)
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	4a0a      	ldr	r2, [pc, #40]	@ (8005274 <prvHeapInit+0xb8>)
 800524a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	4a09      	ldr	r2, [pc, #36]	@ (8005278 <prvHeapInit+0xbc>)
 8005252:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005254:	4b09      	ldr	r3, [pc, #36]	@ (800527c <prvHeapInit+0xc0>)
 8005256:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800525a:	601a      	str	r2, [r3, #0]
}
 800525c:	bf00      	nop
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	20000500 	.word	0x20000500
 800526c:	20004100 	.word	0x20004100
 8005270:	20004108 	.word	0x20004108
 8005274:	20004110 	.word	0x20004110
 8005278:	2000410c 	.word	0x2000410c
 800527c:	2000411c 	.word	0x2000411c

08005280 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005288:	4b28      	ldr	r3, [pc, #160]	@ (800532c <prvInsertBlockIntoFreeList+0xac>)
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	e002      	b.n	8005294 <prvInsertBlockIntoFreeList+0x14>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	429a      	cmp	r2, r3
 800529c:	d8f7      	bhi.n	800528e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	4413      	add	r3, r2
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d108      	bne.n	80052c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	441a      	add	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	441a      	add	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d118      	bne.n	8005308 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	4b15      	ldr	r3, [pc, #84]	@ (8005330 <prvInsertBlockIntoFreeList+0xb0>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d00d      	beq.n	80052fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	441a      	add	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	e008      	b.n	8005310 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005330 <prvInsertBlockIntoFreeList+0xb0>)
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	e003      	b.n	8005310 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	429a      	cmp	r2, r3
 8005316:	d002      	beq.n	800531e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800531e:	bf00      	nop
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	20004100 	.word	0x20004100
 8005330:	20004108 	.word	0x20004108

08005334 <memset>:
 8005334:	4402      	add	r2, r0
 8005336:	4603      	mov	r3, r0
 8005338:	4293      	cmp	r3, r2
 800533a:	d100      	bne.n	800533e <memset+0xa>
 800533c:	4770      	bx	lr
 800533e:	f803 1b01 	strb.w	r1, [r3], #1
 8005342:	e7f9      	b.n	8005338 <memset+0x4>

08005344 <_reclaim_reent>:
 8005344:	4b29      	ldr	r3, [pc, #164]	@ (80053ec <_reclaim_reent+0xa8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4283      	cmp	r3, r0
 800534a:	b570      	push	{r4, r5, r6, lr}
 800534c:	4604      	mov	r4, r0
 800534e:	d04b      	beq.n	80053e8 <_reclaim_reent+0xa4>
 8005350:	69c3      	ldr	r3, [r0, #28]
 8005352:	b1ab      	cbz	r3, 8005380 <_reclaim_reent+0x3c>
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	b16b      	cbz	r3, 8005374 <_reclaim_reent+0x30>
 8005358:	2500      	movs	r5, #0
 800535a:	69e3      	ldr	r3, [r4, #28]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	5959      	ldr	r1, [r3, r5]
 8005360:	2900      	cmp	r1, #0
 8005362:	d13b      	bne.n	80053dc <_reclaim_reent+0x98>
 8005364:	3504      	adds	r5, #4
 8005366:	2d80      	cmp	r5, #128	@ 0x80
 8005368:	d1f7      	bne.n	800535a <_reclaim_reent+0x16>
 800536a:	69e3      	ldr	r3, [r4, #28]
 800536c:	4620      	mov	r0, r4
 800536e:	68d9      	ldr	r1, [r3, #12]
 8005370:	f000 f864 	bl	800543c <_free_r>
 8005374:	69e3      	ldr	r3, [r4, #28]
 8005376:	6819      	ldr	r1, [r3, #0]
 8005378:	b111      	cbz	r1, 8005380 <_reclaim_reent+0x3c>
 800537a:	4620      	mov	r0, r4
 800537c:	f000 f85e 	bl	800543c <_free_r>
 8005380:	6961      	ldr	r1, [r4, #20]
 8005382:	b111      	cbz	r1, 800538a <_reclaim_reent+0x46>
 8005384:	4620      	mov	r0, r4
 8005386:	f000 f859 	bl	800543c <_free_r>
 800538a:	69e1      	ldr	r1, [r4, #28]
 800538c:	b111      	cbz	r1, 8005394 <_reclaim_reent+0x50>
 800538e:	4620      	mov	r0, r4
 8005390:	f000 f854 	bl	800543c <_free_r>
 8005394:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005396:	b111      	cbz	r1, 800539e <_reclaim_reent+0x5a>
 8005398:	4620      	mov	r0, r4
 800539a:	f000 f84f 	bl	800543c <_free_r>
 800539e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80053a0:	b111      	cbz	r1, 80053a8 <_reclaim_reent+0x64>
 80053a2:	4620      	mov	r0, r4
 80053a4:	f000 f84a 	bl	800543c <_free_r>
 80053a8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80053aa:	b111      	cbz	r1, 80053b2 <_reclaim_reent+0x6e>
 80053ac:	4620      	mov	r0, r4
 80053ae:	f000 f845 	bl	800543c <_free_r>
 80053b2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80053b4:	b111      	cbz	r1, 80053bc <_reclaim_reent+0x78>
 80053b6:	4620      	mov	r0, r4
 80053b8:	f000 f840 	bl	800543c <_free_r>
 80053bc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80053be:	b111      	cbz	r1, 80053c6 <_reclaim_reent+0x82>
 80053c0:	4620      	mov	r0, r4
 80053c2:	f000 f83b 	bl	800543c <_free_r>
 80053c6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80053c8:	b111      	cbz	r1, 80053d0 <_reclaim_reent+0x8c>
 80053ca:	4620      	mov	r0, r4
 80053cc:	f000 f836 	bl	800543c <_free_r>
 80053d0:	6a23      	ldr	r3, [r4, #32]
 80053d2:	b14b      	cbz	r3, 80053e8 <_reclaim_reent+0xa4>
 80053d4:	4620      	mov	r0, r4
 80053d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80053da:	4718      	bx	r3
 80053dc:	680e      	ldr	r6, [r1, #0]
 80053de:	4620      	mov	r0, r4
 80053e0:	f000 f82c 	bl	800543c <_free_r>
 80053e4:	4631      	mov	r1, r6
 80053e6:	e7bb      	b.n	8005360 <_reclaim_reent+0x1c>
 80053e8:	bd70      	pop	{r4, r5, r6, pc}
 80053ea:	bf00      	nop
 80053ec:	20000010 	.word	0x20000010

080053f0 <__libc_init_array>:
 80053f0:	b570      	push	{r4, r5, r6, lr}
 80053f2:	4d0d      	ldr	r5, [pc, #52]	@ (8005428 <__libc_init_array+0x38>)
 80053f4:	4c0d      	ldr	r4, [pc, #52]	@ (800542c <__libc_init_array+0x3c>)
 80053f6:	1b64      	subs	r4, r4, r5
 80053f8:	10a4      	asrs	r4, r4, #2
 80053fa:	2600      	movs	r6, #0
 80053fc:	42a6      	cmp	r6, r4
 80053fe:	d109      	bne.n	8005414 <__libc_init_array+0x24>
 8005400:	4d0b      	ldr	r5, [pc, #44]	@ (8005430 <__libc_init_array+0x40>)
 8005402:	4c0c      	ldr	r4, [pc, #48]	@ (8005434 <__libc_init_array+0x44>)
 8005404:	f000 f870 	bl	80054e8 <_init>
 8005408:	1b64      	subs	r4, r4, r5
 800540a:	10a4      	asrs	r4, r4, #2
 800540c:	2600      	movs	r6, #0
 800540e:	42a6      	cmp	r6, r4
 8005410:	d105      	bne.n	800541e <__libc_init_array+0x2e>
 8005412:	bd70      	pop	{r4, r5, r6, pc}
 8005414:	f855 3b04 	ldr.w	r3, [r5], #4
 8005418:	4798      	blx	r3
 800541a:	3601      	adds	r6, #1
 800541c:	e7ee      	b.n	80053fc <__libc_init_array+0xc>
 800541e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005422:	4798      	blx	r3
 8005424:	3601      	adds	r6, #1
 8005426:	e7f2      	b.n	800540e <__libc_init_array+0x1e>
 8005428:	08005560 	.word	0x08005560
 800542c:	08005560 	.word	0x08005560
 8005430:	08005560 	.word	0x08005560
 8005434:	08005564 	.word	0x08005564

08005438 <__retarget_lock_acquire_recursive>:
 8005438:	4770      	bx	lr

0800543a <__retarget_lock_release_recursive>:
 800543a:	4770      	bx	lr

0800543c <_free_r>:
 800543c:	b538      	push	{r3, r4, r5, lr}
 800543e:	4605      	mov	r5, r0
 8005440:	2900      	cmp	r1, #0
 8005442:	d041      	beq.n	80054c8 <_free_r+0x8c>
 8005444:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005448:	1f0c      	subs	r4, r1, #4
 800544a:	2b00      	cmp	r3, #0
 800544c:	bfb8      	it	lt
 800544e:	18e4      	addlt	r4, r4, r3
 8005450:	f000 f83e 	bl	80054d0 <__malloc_lock>
 8005454:	4a1d      	ldr	r2, [pc, #116]	@ (80054cc <_free_r+0x90>)
 8005456:	6813      	ldr	r3, [r2, #0]
 8005458:	b933      	cbnz	r3, 8005468 <_free_r+0x2c>
 800545a:	6063      	str	r3, [r4, #4]
 800545c:	6014      	str	r4, [r2, #0]
 800545e:	4628      	mov	r0, r5
 8005460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005464:	f000 b83a 	b.w	80054dc <__malloc_unlock>
 8005468:	42a3      	cmp	r3, r4
 800546a:	d908      	bls.n	800547e <_free_r+0x42>
 800546c:	6820      	ldr	r0, [r4, #0]
 800546e:	1821      	adds	r1, r4, r0
 8005470:	428b      	cmp	r3, r1
 8005472:	bf01      	itttt	eq
 8005474:	6819      	ldreq	r1, [r3, #0]
 8005476:	685b      	ldreq	r3, [r3, #4]
 8005478:	1809      	addeq	r1, r1, r0
 800547a:	6021      	streq	r1, [r4, #0]
 800547c:	e7ed      	b.n	800545a <_free_r+0x1e>
 800547e:	461a      	mov	r2, r3
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	b10b      	cbz	r3, 8005488 <_free_r+0x4c>
 8005484:	42a3      	cmp	r3, r4
 8005486:	d9fa      	bls.n	800547e <_free_r+0x42>
 8005488:	6811      	ldr	r1, [r2, #0]
 800548a:	1850      	adds	r0, r2, r1
 800548c:	42a0      	cmp	r0, r4
 800548e:	d10b      	bne.n	80054a8 <_free_r+0x6c>
 8005490:	6820      	ldr	r0, [r4, #0]
 8005492:	4401      	add	r1, r0
 8005494:	1850      	adds	r0, r2, r1
 8005496:	4283      	cmp	r3, r0
 8005498:	6011      	str	r1, [r2, #0]
 800549a:	d1e0      	bne.n	800545e <_free_r+0x22>
 800549c:	6818      	ldr	r0, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	6053      	str	r3, [r2, #4]
 80054a2:	4408      	add	r0, r1
 80054a4:	6010      	str	r0, [r2, #0]
 80054a6:	e7da      	b.n	800545e <_free_r+0x22>
 80054a8:	d902      	bls.n	80054b0 <_free_r+0x74>
 80054aa:	230c      	movs	r3, #12
 80054ac:	602b      	str	r3, [r5, #0]
 80054ae:	e7d6      	b.n	800545e <_free_r+0x22>
 80054b0:	6820      	ldr	r0, [r4, #0]
 80054b2:	1821      	adds	r1, r4, r0
 80054b4:	428b      	cmp	r3, r1
 80054b6:	bf04      	itt	eq
 80054b8:	6819      	ldreq	r1, [r3, #0]
 80054ba:	685b      	ldreq	r3, [r3, #4]
 80054bc:	6063      	str	r3, [r4, #4]
 80054be:	bf04      	itt	eq
 80054c0:	1809      	addeq	r1, r1, r0
 80054c2:	6021      	streq	r1, [r4, #0]
 80054c4:	6054      	str	r4, [r2, #4]
 80054c6:	e7ca      	b.n	800545e <_free_r+0x22>
 80054c8:	bd38      	pop	{r3, r4, r5, pc}
 80054ca:	bf00      	nop
 80054cc:	2000425c 	.word	0x2000425c

080054d0 <__malloc_lock>:
 80054d0:	4801      	ldr	r0, [pc, #4]	@ (80054d8 <__malloc_lock+0x8>)
 80054d2:	f7ff bfb1 	b.w	8005438 <__retarget_lock_acquire_recursive>
 80054d6:	bf00      	nop
 80054d8:	20004258 	.word	0x20004258

080054dc <__malloc_unlock>:
 80054dc:	4801      	ldr	r0, [pc, #4]	@ (80054e4 <__malloc_unlock+0x8>)
 80054de:	f7ff bfac 	b.w	800543a <__retarget_lock_release_recursive>
 80054e2:	bf00      	nop
 80054e4:	20004258 	.word	0x20004258

080054e8 <_init>:
 80054e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ea:	bf00      	nop
 80054ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ee:	bc08      	pop	{r3}
 80054f0:	469e      	mov	lr, r3
 80054f2:	4770      	bx	lr

080054f4 <_fini>:
 80054f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f6:	bf00      	nop
 80054f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054fa:	bc08      	pop	{r3}
 80054fc:	469e      	mov	lr, r3
 80054fe:	4770      	bx	lr
